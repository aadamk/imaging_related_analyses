getwd()
setwd("/Users/jinr/OMPARE/tmb_normalization")
setwd("/Users/jinr/OMPARE/tmb_normalization/code")
library(tidyverse)
library(GenomicRanges)
# filters
var_class = c('Missense_Mutation', 'Nonsense_Mutation', 'Frame_Shift_Del', 'Frame_Shift_Ins',  'In_Frame_Del', 'In_Frame_Ins')
vaf_cutoff = 0.05
var_count = 3
tumor_depth = 25
# read in the PBTA mutect2 file
pbta_mutect2 <- data.table::fread('../references/pbta-snv-mutect2.vep.maf.gz')
# read in the histologies file
histologies <- read.delim("../references/pbta-histologies.tsv", header = T, sep = "\t", stringsAsFactors = F)
# Take a look at all the samples that are in there
pbta_mutect2_samples <- pbta_mutect2$Tumor_Sample_Barcode %>% unique()
# Filter the histologies file to contain only the specimens that have mutect2 results
pbta_mutect2_samples_histology <- histologies %>%
dplyr::filter(Kids_First_Biospecimen_ID %in% pbta_mutect2_samples)
# See what are the cohorts and experimental strategy
pbta_mutect2_samples_histology$cohort %>% unique()
pbta_mutect2_samples_histology$experimental_strategy %>% unique()
# read in the default bed file for all PBTA samples
pbta_bed <- read.delim("../references/pbta_bed_files/xgen-exome-research-panel-targets_hg38_ucsc_liftover.100bp_padded.sort.merged.bed")
pbta_bed <- pbta_bed[,1:3]
colnames(pbta_bed)  <- c('chr', 'start', 'end')
# filter pbta maf file
pbta_maf <- pbta_mutect2 %>%
group_by(Tumor_Sample_Barcode) %>%
mutate(vaf = t_alt_count/(t_alt_count+t_ref_count)) %>%
filter(Variant_Classification %in% var_class,
t_depth >= tumor_depth,
vaf >= vaf_cutoff,
t_alt_count >= var_count) %>%
dplyr::select(Hugo_Symbol, Variant_Classification, Chromosome, Start_Position, End_Position, Tumor_Sample_Barcode)
# add bed file length and bed file selected to pbta_maf
pbta_maf <- pbta_maf %>% left_join(pbta_mutect2_samples_histology)
colnames(pbta_maf)
colnames(pbta_mutect2_samples_histology)
View(pbta_maf)
# change the histology file to contain common column as pbta_maf
pbta_mutect2_samples_histology <- pbta_mutect2_samples_histology %>%
dplyr::mutate(Tumor_Sample_Barcode = Kids_First_Biospecimen_ID) %>%
dplyr::select(Tumor_Sample_Barcode, short_histology, experimental_strategy, cohort)
# annotate maf with relevant histologies information
pbta_maf <- pbta_maf %>% left_join(pbta_mutect2_samples_histology)
View(pbta_maf)
# calculate bed length for the default bed file
bed_length<-0
for (i in 1:nrow(pbta_bed)) {
distance <- as.numeric(bed_file[i,3]) - as.numeric(bed_file[i,2])
bed_length = bed_length + distance
}
for (i in 1:nrow(pbta_bed)) {
distance <- as.numeric(pbta_bed[i,3]) - as.numeric(pbta_bed[i,2])
bed_length = bed_length + distance
}
# calculate maf result using the default bed file
# intersect with bed file
subject <- with(pbta_bed, GRanges(chr, IRanges(start = start, end = end)))
query <- with(pbta_maf, GRanges(Chromosome, IRanges(start = Start_Position, end = End_Position, names = Hugo_Symbol)))
pbta_tmb <- findOverlaps(query = query, subject = subject, type = "within")
pbta_tmb <- data.frame(pbta_maf_matched[queryHits(pbta_tmb_matched),], pbta_bed[subjectHits(pbta_tmb_matched),])
pbta_tmb <- data.frame(pbta_maf[queryHits(pbta_tmb_matched),], pbta_bed[subjectHits(pbta_tmb_matched),])
# calculate maf result using the default bed file
# intersect with bed file
subject <- with(pbta_bed, GRanges(chr, IRanges(start = start, end = end)))
query <- with(pbta_maf, GRanges(Chromosome, IRanges(start = Start_Position, end = End_Position, names = Hugo_Symbol)))
pbta_tmb <- findOverlaps(query = query, subject = subject, type = "within")
pbta_tmb <- data.frame(pbta_maf[queryHits(pbta_tmb),], pbta_bed[subjectHits(pbta_tmb),])
# mutations per sample
pbta_tmb <- pbta_tmb %>%
mutate(sample_name =  Tumor_Sample_Barcode) %>%
group_by(sample_name) %>%
mutate(num_var = n()) %>%
mutate(tmb = num_var*1000000/bed_length) %>%
dplyr::select(sample_name, short_histology, cohort, experimental_strategy, tmb) %>%
unique() %>%
dplyr::mutate(BedLength = bed_length)
colnames(pbta_tmb) <- c("Samplename", "Diseasetype", "Cohort", "ExpStrategy", "TMBscore", "BedLength")
# update file with new filters
write.table(pbta_tmb, file = '../results/PBTA-TMBscores_withdiseastype.txt', quote = F, sep = "\t", row.names = F)
library(tidyverse)
library(GenomicRanges)
# Load the required files
ped_tmb <- data.table::fread('../results/PBTA-TMBscores_withdiseastype.txt') %>%
select(Diseasetype, Samplename, TMBscore)
adult_tmb <- data.table::fread('../results/TCGA_not_in_pbta_diseasetypes_and_samples_TMBscores.txt') %>%
select(Diseasetype, Samplename, TMBscore)
adult_tmb_in_pbta <- data.table::fread('../results/TCGA_in_pbta_diseasetypes_and_samples_TMBscores.txt') %>%
select(Diseasetype, Samplename, TMBscore)
tmb_bed_file <- data.table::fread("../references/ashion_confidential_exome_v2_2nt_pad.Gh38.bed")
tmb_bed_file <- tmb_bed_file[,1:3]
colnames(tmb_bed_file)  <- c('chr', 'start', 'end')
tmb_bed_file$chr <- sub("^", "chr", tmb_bed_file$chr )
# calculate the length of the bed file
bed_length<-0
for (i in 1:nrow(tmb_bed_file)) {
distance <- as.numeric(tmb_bed_file[i,3]) - as.numeric(tmb_bed_file[i,2])
bed_length <- bed_length + distance
}
## read in parameters
var_class = c('Missense_Mutation','Nonsense_Mutation','Frame_Shift_Del', 'Frame_Shift_Ins', 'In_Frame_Del', 'In_Frame_Ins')
vaf_cutoff = 0.05
var_count = 3
tumor_depth = 25
myMutData_32 <- data.table::fread("../references/pnoc008_32.mutect2_somatic.norm.annot.protected.maf",skip = 1, stringsAsFactors = F)
myMutData_33 <- data.table::fread("../references/pnoc008_33.mutect2_somatic.norm.annot.protected.maf",skip = 1, stringsAsFactors = F)
myMutData_34 <- data.table::fread("../references/pnoc008_34.mutect2_somatic.norm.annot.protected.maf",skip = 1, stringsAsFactors = F)
mutFiles <- list(myMutData_32, myMutData_33, myMutData_34)
# apply filters using Friends of Cancer Research Project Standards
myMutData_list <- lapply(mutFiles, function(x){
x %>%
dplyr::mutate(vaf = t_alt_count/(t_alt_count+t_ref_count)) %>%
dplyr::filter(Variant_Classification %in% var_class,
t_depth >= tumor_depth,
vaf >= vaf_cutoff,
t_alt_count >= var_count) %>%
dplyr::select(Hugo_Symbol, Variant_Classification, Chromosome, Start_Position, End_Position)
})
# intersect with bed file
TMB_list <- lapply(myMutData_list, function(x){
myMutData=x
subject <- with(tmb_bed_file, GRanges(chr, IRanges(start = start, end = end)))
query <- with(myMutData, GRanges(Chromosome, IRanges(start = Start_Position, end = End_Position, names = Hugo_Symbol)))
res <- findOverlaps(query = query, subject = subject, type = "within")
res <- data.frame(myMutData[queryHits(res),], tmb_bed_file[subjectHits(res),])
TMB_each <- (nrow(res))*1000000/bed_length
return(TMB_each)
}
)
ped_tmb$Type <- "Pediatric"
adult_tmb$Type <- "Adult"
adult_tmb_in_pbta$Type <- "Adult in PBTA"
tmbScores <- rbind(ped_tmb, adult_tmb, adult_tmb_in_pbta)
# count median per histology
disease.order <- tmbScores %>%
group_by(Type, Diseasetype) %>%
summarise(median = median(TMBscore), count = n()) %>%
filter(count > 2) %>%
arrange(desc(median)) %>%
.$Diseasetype
# subset to disease type with > 2 samples
tmbScores <- tmbScores %>%
filter(Diseasetype %in% disease.order)
tmbScores$Diseasetype <- factor(tmbScores$Diseasetype, levels = disease.order)
# Plot it
ggplot_list <- lapply(TMB_list, function(x){
ggplot(tmbScores, aes(Diseasetype, TMBscore, fill = Type)) +
geom_boxplot() + theme_bw() + scale_y_log10(breaks = c(.25, 1, 10, 100, 500)) +
scale_fill_manual(values = c("blue", "orange", "green")) +
xlab("Disease") + ylab("Mutations per MB") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), aspect.ratio = 0.5) +
geom_hline(yintercept = x, linetype = 2, color = 'gray30') +
annotate("text", x = 35, y = max(tmbScores$TMBscore) - 50,
label = "- - - Patient TMB", size = 3,
fontface = 'italic', color = "gray30")
})
ggsave("../plots/PNOC008-32-TMB-plot.png", ggplot_list[[1]])
ggsave("../plots/PNOC008-33-TMB-plot.png", ggplot_list[[2]])
ggsave("../plots/PNOC008-34-TMB-plot.png", ggplot_list[[3]])
# Plot it
ggplot_list <- lapply(TMB_list, function(x){
ggplot(tmbScores, aes(Diseasetype, TMBscore, fill = Type)) +
geom_boxplot() + theme_bw() + scale_y_log10(breaks = c(.25, 1, 10, 100, 500)) +
scale_fill_manual(values = c("blue", "orange", "green")) +
xlab("Disease") + ylab("Mutations per MB") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), aspect.ratio = 0.4) +
geom_hline(yintercept = x, linetype = 2, color = 'gray30') +
annotate("text", x = 35, y = max(tmbScores$TMBscore) - 50,
label = "- - - Patient TMB", size = 3,
fontface = 'italic', color = "gray30")
})
ggsave("../plots/PNOC008-32-TMB-plot.png", ggplot_list[[1]])
ggsave("../plots/PNOC008-33-TMB-plot.png", ggplot_list[[2]])
ggsave("../plots/PNOC008-34-TMB-plot.png", ggplot_list[[3]])
# Plot it
ggplot_list <- lapply(TMB_list, function(x){
ggplot(tmbScores, aes(Diseasetype, TMBscore, fill = Type)) +
geom_boxplot() + theme_bw() + scale_y_log10(breaks = c(.25, 1, 10, 100, 500)) +
scale_fill_manual(values = c("blue", "orange", "green")) +
xlab("Disease") + ylab("Mutations per MB") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), aspect.ratio = 0.3) +
geom_hline(yintercept = x, linetype = 2, color = 'gray30') +
annotate("text", x = 35, y = max(tmbScores$TMBscore) - 50,
label = "- - - Patient TMB", size = 3,
fontface = 'italic', color = "gray30")
})
ggsave("../plots/PNOC008-32-TMB-plot.png", ggplot_list[[1]])
# Plot it
ggplot_list <- lapply(TMB_list, function(x){
ggplot(tmbScores, aes(Diseasetype, TMBscore, fill = Type)) +
geom_boxplot() + theme_bw() + scale_y_log10(breaks = c(.25, 1, 10, 100, 500)) +
scale_fill_manual(values = c("blue", "orange", "green")) +
xlab("Disease") + ylab("Mutations per MB") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), aspect.ratio = 1) +
geom_hline(yintercept = x, linetype = 2, color = 'gray30') +
annotate("text", x = 35, y = max(tmbScores$TMBscore) - 50,
label = "- - - Patient TMB", size = 3,
fontface = 'italic', color = "gray30")
})
ggsave("../plots/PNOC008-32-TMB-plot.png", ggplot_list[[1]])
ggsave("../plots/PNOC008-32-TMB-plot.png", ggplot_list[[1]], width=10, height=5)
# Plot it
ggplot_list <- lapply(TMB_list, function(x){
ggplot(tmbScores, aes(Diseasetype, TMBscore, fill = Type)) +
geom_boxplot() + theme_bw() + scale_y_log10(breaks = c(.25, 1, 10, 100, 500)) +
scale_fill_manual(values = c("blue", "orange", "green")) +
xlab("Disease") + ylab("Mutations per MB") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), aspect.ratio = 0.5) +
geom_hline(yintercept = x, linetype = 2, color = 'gray30') +
annotate("text", x = 35, y = max(tmbScores$TMBscore) - 50,
label = "- - - Patient TMB", size = 3,
fontface = 'italic', color = "gray30")
})
ggsave("../plots/PNOC008-32-TMB-plot.png", ggplot_list[[1]])
ggsave("../plots/PNOC008-32-TMB-plot.png", ggplot_list[[1]], width = 10, height = 6)
ggsave("../plots/PNOC008-33-TMB-plot.png", ggplot_list[[2]], width = 10, height = 6)
ggsave("../plots/PNOC008-34-TMB-plot.png", ggplot_list[[3]], width = 10, height = 6)
getwd()
bed_ashion <- read.delim("../references/ashion_confidential_exome_v2_2nt_pad.Gh38.bed", header = F)
bed_length<-0
for (i in 1:nrow(bed_ashion)) {
distance <- as.numeric(bed_ashion[i,3]) - as.numeric(bed_ashion[i,2])
bed_length <- bed_length + distance
}
getwd()
bed_file <- read_tsv("../results/tcga_not_in_pbta_bed_selected.tsv")
View(bed_file)
bed_file <- bed_file[,1:3]
readr::write_tsv(bed_file, "../results/tcga_not_in_pbta_bed_selected.tsv")
getwd()
getwd()
pbta-histologies <- read.delim("Downloads/pbta-histologies.tsv")
histologies <- read.delim("Downloads/pbta-histologies.tsv")
histologies_base <- read.delim("Downloads/pbta-histologies-base.tsv")
View(histologies_base)
View(histologies)
colnames(histologies)
regular <- colnames(histologies)
base <- colnames(histologies_base)
regular[-intersect(regular, base)]
setdiff(base,regular)
intersect(base, regular)
common <- intersect(base, regular)
see <-histologies %>% select(-common)
library(dplyr)
see <-histologies %>% select(-common)
View(see)
library(tidyverse)
library(survival)
library(caret)
library(cowplot)
histology_df <- read_tsv("../data/histologies.tsv")
expression_data <- readRDS("../data/gene-expression-rsem-tpm-collapsed.rds")
cohort_df <- histology_df %>% dplyr::filter(tumor_descriptor == "Initial CNS Tumor") %>%
dplyr::filter(experimental_strategy=="RNA-Seq") %>%
dplyr::filter(cancer_group %in% c("LGG", "Low-grade glioma/astrocytoma")) %>%
dplyr::select(Kids_First_Biospecimen_ID, OS_status, OS_days, harmonized_diagnosis, CNS_region)
# get biospecimen ID's for samples
cohort_bsid <- cohort_df %>% pull(Kids_First_Biospecimen_ID) %>% unique()
# subset to gene and sample of interest
expression_of_interest <- expression_data %>% dplyr::select(all_of(cohort_bsid)) %>%
rownames_to_column("GeneSymbol") %>%
dplyr::filter(GeneSymbol %in% c("SLC7A5", "FOLH1")) %>%
column_to_rownames("GeneSymbol") %>%
t() %>% as.data.frame() %>%
rownames_to_column("Kids_First_Biospecimen_ID")
#annotate relevant clinical information to the expression data frame
combined <- expression_of_interest %>% dplyr::left_join(cohort_df)
combined_annotated <- combined %>% dplyr::filter(!is.na(OS_status)) %>%
dplyr::mutate(os_status_level = case_when(
OS_status == "LIVING" ~ 0,
OS_status == "DECEASED" ~ 1
))
class(os_status_level)
class(combined_annotated$os_status_level)
histology_df <- read_tsv("../data/histologies.tsv")
histology_df <- readr::read_tsv("../data/histologies.tsv")
getwd()
setwd("/Users/jinr/imaging_related_analyses/molecular_target_radiation")
library(tidyverse)
library(survminer)
library(cowplot)
library(survival)
histology_df <- readr::read_tsv("../data/histologies.tsv")
expression_data <- readRDS("../data/gene-expression-rsem-tpm-collapsed.rds")
cohort_df <- histology_df %>% dplyr::filter(tumor_descriptor == "Initial CNS Tumor") %>%
dplyr::filter(experimental_strategy=="RNA-Seq") %>%
dplyr::filter(cancer_group %in% c("LGG", "Low-grade glioma/astrocytoma"))
library(tidyverse)
library(survminer)
library(cowplot)
library(survival)
cohort_df <- histology_df %>% dplyr::filter(tumor_descriptor == "Initial CNS Tumor") %>%
dplyr::filter(experimental_strategy=="RNA-Seq") %>%
dplyr::filter(cancer_group %in% c("LGG", "Low-grade glioma/astrocytoma")) %>%
dplyr::mutate(PFS_status = if_else(PFS_days < OS_days, 1, 0)) %>%
dplyr::select(Kids_First_Biospecimen_ID, OS_status, OS_days, PFS_status,PFS_days)
View(cohort_df)
cohort_df$PFS_days %>% class()
cohort_df$OS_days
cohort_df$OS_days %>% class()
cohort_df$PFS_days <- as.numeric(cohort_df$PFS_days)
cohort_df <- cohort_df %>%
dplyr::mutate(PFS_status = if_else(PFS_days < OS_days, 1, 0)) %>%
dplyr::select(Kids_First_Biospecimen_ID, OS_status, OS_days, PFS_status,PFS_days)
cohort_df %>% select(PFS_status) %>% table()
cohort_df$PFS_status %>% class()
library(tidyverse)
library(survival)
library(caret)
library(cowplot)
cohort_df <- histology_df %>% dplyr::filter(tumor_descriptor == "Initial CNS Tumor") %>%
dplyr::filter(experimental_strategy=="RNA-Seq") %>%
dplyr::filter(cancer_group %in% c("LGG", "Low-grade glioma/astrocytoma"))
cohort_df$PFS_days <- as.numeric(cohort_df$PFS_days)
cohort_df <- cohort_df %>%
dplyr::mutate(PFS_status = if_else(PFS_days < OS_days, 1, 0)) %>%
dplyr::select(Kids_First_Biospecimen_ID, OS_status, OS_days, PFS_status, PFS_days, harmonized_diagnosis, CNS_region)
nrow(cohort_df)
cohort_df
# get biospecimen ID's for samples
cohort_bsid <- cohort_df %>% pull(Kids_First_Biospecimen_ID) %>% unique()
# subset to gene and sample of interest
expression_of_interest <- expression_data %>% dplyr::select(all_of(cohort_bsid)) %>%
rownames_to_column("GeneSymbol") %>%
dplyr::filter(GeneSymbol %in% c("SLC7A5", "FOLH1")) %>%
column_to_rownames("GeneSymbol") %>%
t() %>% as.data.frame() %>%
rownames_to_column("Kids_First_Biospecimen_ID")
#annotate relevant clinical information to the expression data frame
combined <- expression_of_interest %>% dplyr::left_join(cohort_df)
combined_annotated <- combined %>% dplyr::filter(!is.na(OS_status)) %>%
dplyr::mutate(os_status_level = case_when(
OS_status == "LIVING" ~ 0,
OS_status == "DECEASED" ~ 1
))
View(combined_annotated)
# remove NA for PFS_status
combined_annotated <- combined_annotated %>% dplyr::filter(!is.na(PFS_status))
View(cohort_df)
cohort_df %>% select(PFS_status) %>% table()
