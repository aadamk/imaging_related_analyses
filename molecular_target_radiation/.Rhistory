append(pnoc008_sample_of_interest)
shared_subjects_pnoc008 <- shared_subjects[shared_subjects %in% consensus_maf_pnoc008$subjectID]
shared_subjects_tcga <- shared_subjects[!shared_subjects %in% consensus_maf_pnoc008$subjectID]
# Use the kids_first_biospecimen_id to filter pbta combined consensus SNV
matched_maf_tcga_shared <- tcga_maf %>% filter(Tumor_Sample_Barcode %in% shared_subjects_tcga)
# filter based on subjectID
matched_maf_pnoc008_shared  <- consensus_maf_pnoc008 %>% filter(subjectID %in% shared_subjects_pnoc008)
# combine the maf to prepare for MAF object
matched_maf_tcga_shared <- matched_maf_tcga_shared %>% select(common_columns)
matched_maf_pnoc008_shared <- matched_maf_pnoc008_shared %>% select(common_columns)
combined_maf_shared <- rbind(matched_maf_tcga_shared, matched_maf_pnoc008_shared) %>%
dplyr::rename(AAChange = HGVSp_Short)
pnoc008_cnv_shared <- pnoc008_cnv %>%
filter(SampleID %in% shared_subjects_pnoc008 )
tcga_cnv_shared <- tcga_cnv %>%
filter(Kids_First_Biospecimen_ID %in% shared_subjects_tcga)
combined_cnv_shared <- rbind(pnoc008_cnv_shared, pbta_cnv_shared)
recurrent_subjects <- mutational_analysis$recurrent_alterations %>%
filter(Alteration_Datatype == "CNV") %>%
pull(subject_id) %>% unique() %>%
append(pnoc008_sample_of_interest)
recurrent_subjects_pnoc008 <- recurrent_subjects[recurrent_subjects %in% consensus_maf_pnoc008$subjectID]
recurrent_subjects_tcga <- recurrent_subjects[!recurrent_subjects %in% consensus_maf_pnoc008$subjectID]
# Use the kids_first_biospecimen_id to filter pbta combined consensus SNV
matched_maf_tcga_recurrent <- tcga_maf %>% filter(Tumor_Sample_Barcode %in% recurrent_subjects_tcga)
# filter based on subjectID
matched_maf_pnoc008_recurrent  <- consensus_maf_pnoc008 %>% filter(subjectID %in% recurrent_subjects_pnoc008)
# combine the maf to prepare for MAF object
matched_maf_tcga_recurrent <- matched_maf_tcga_recurrent %>% select(common_columns)
matched_maf_pnoc008_recurrent <- matched_maf_pnoc008_recurrent %>% select(common_columns)
combined_maf_recurrent <- rbind(matched_maf_tcga_recurrent, matched_maf_pnoc008_recurrent) %>%
dplyr::rename(AAChange = HGVSp_Short)
pnoc008_cnv_recurrent <- pnoc008_cnv %>%
filter(SampleID %in% recurrent_subjects_pnoc008 )
tcga_cnv_recurrent <- tcga_cnv %>%
filter(Kids_First_Biospecimen_ID %in% recurrent_subjects_tcga)
combined_cnv_recurrent <- rbind(pnoc008_cnv_recurrent, pbta_cnv_recurrent)
combined_cnv_recurrent <- combined_cnv_recurrent %>%
dplyr::mutate(CN = case_when(
Alteration_Type == "Gain" ~ "ShallowAmp",
Alteration_Type == "Amplification" ~ "Amp",
Alteration_Type == "Loss" ~ "Del"
)) %>%
dplyr::select(-Alteration_Type) %>%
dplyr::rename(Sample_name = Kids_First_Biospecimen_ID) %>%
dplyr::select(Gene, Sample_name, CN)
maf_object_recurrent_cnv = read.maf(maf = combined_maf_recurrent, cnTable = combined_cnv_recurrent)
oncoplot(maf = maf_object_recurrent_cnv, top=10)
library(dplyr)
library(ggplot2)
pathway_analysis_pediatric <- readRDS("../data/pathway_analysis_adult.rds")
shared_pathway_pediatric <- pathway_analysis_pediatric$shared_pathways %>%
filter(sample_name == "PNOC008-36")
shared_pathway_pediatric$padj <- as.numeric(shared_pathway_pediatric$padj)
shared_pathway_pediatric$direction <- factor(shared_pathway_pediatric$direction, levels = c("up", "down"))
shared_pathway_pediatric <- shared_pathway_pediatric %>% arrange(padj) %>% arrange(direction)
shared_pathway_pediatric$pathway <- factor(shared_pathway_pediatric$pathway, levels = unique(shared_pathway_pediatric$pathway))
ggplot(shared_pathway_pediatric, aes(pathway, y = (-1)*log10(padj), fill = direction)) +
geom_bar(stat="identity") + coord_flip() + theme_bw() +
xlab("") +
ylab("-log10 Adj. P-Value") +
theme(plot.margin = unit(c(1, 5, 1, 7), "cm")) +
scale_fill_manual(name = "Direction", values = c("down" = "forest green", "up" = "red")) +
ggtitle(paste0("Comparison against pediatric"))
ggsave("plots/pathway_analysis_pediatric.png", height = 6, width = 15)
library(dplyr)
library(ggplot2)
pathway_analysis_pediatric <- readRDS("../data/pathway_analysis_pediatric.rds")
shared_pathway_pediatric <- pathway_analysis_pediatric$shared_pathways %>%
filter(sample_name == "PNOC008-36")
shared_pathway_pediatric$padj <- as.numeric(shared_pathway_pediatric$padj)
shared_pathway_pediatric$direction <- factor(shared_pathway_pediatric$direction, levels = c("up", "down"))
shared_pathway_pediatric <- shared_pathway_pediatric %>% arrange(padj) %>% arrange(direction)
shared_pathway_pediatric$pathway <- factor(shared_pathway_pediatric$pathway, levels = unique(shared_pathway_pediatric$pathway))
ggplot(shared_pathway_pediatric, aes(pathway, y = (-1)*log10(padj), fill = direction)) +
geom_bar(stat="identity") + coord_flip() + theme_bw() +
xlab("") +
ylab("-log10 Adj. P-Value") +
theme(plot.margin = unit(c(1, 5, 1, 7), "cm")) +
scale_fill_manual(name = "Direction", values = c("down" = "forest green", "up" = "red")) +
ggtitle(paste0("Comparison against pediatric"))
ggsave("plots/pathway_analysis_pediatric.png", height = 6, width = 15)
pathway_analysis_pediatric <- readRDS("../data/pathway_analysis_adult.rds")
shared_pathway_pediatric <- pathway_analysis_pediatric$shared_pathways %>%
filter(sample_name == "PNOC008-36")
shared_pathway_pediatric$padj <- as.numeric(shared_pathway_pediatric$padj)
shared_pathway_pediatric$direction <- factor(shared_pathway_pediatric$direction, levels = c("up", "down"))
shared_pathway_pediatric <- shared_pathway_pediatric %>% arrange(padj) %>% arrange(direction)
shared_pathway_pediatric$pathway <- factor(shared_pathway_pediatric$pathway, levels = unique(shared_pathway_pediatric$pathway))
pathway_analysis_pediatric <- readRDS("../data/pathway_analysis_adult.rds")
shared_pathway_pediatric <- pathway_analysis_pediatric$shared_pathways %>%
filter(sample_name == "PNOC008-36")
shared_pathway_pediatric$padj <- as.numeric(shared_pathway_pediatric$padj)
shared_pathway_pediatric$direction <- factor(shared_pathway_pediatric$direction, levels = c("up", "down"))
shared_pathway_pediatric <- shared_pathway_pediatric %>% arrange(padj) %>% arrange(direction)
shared_pathway_pediatric$pathway <- factor(shared_pathway_pediatric$pathway, levels = unique(shared_pathway_pediatric$pathway))
ggplot(shared_pathway_pediatric, aes(pathway, y = (-1)*log10(padj), fill = direction)) +
geom_bar(stat="identity") + coord_flip() + theme_bw() +
xlab("") +
ylab("-log10 Adj. P-Value") +
theme(plot.margin = unit(c(1, 5, 1, 7), "cm")) +
scale_fill_manual(name = "Direction", values = c("down" = "forest green", "up" = "red")) +
ggtitle(paste0("Comparison against pediatric"))
ggsave("plots/pathway_analysis_adult.png", height = 6, width = 15)
library(dplyr)
# BiocManager::install("maftools", force =TRUE)
library(maftools)
# sample of interest is defined here
pnoc008_sample_of_interest <- "PNOC008-36"
root_dir <- rprojroot::find_root(rprojroot::has_dir(".git"))
lollipop_dir <- file.path(pediatric_dir, "plots/lollipop")
pediatric_dir <- file.path(root_dir, "graph-updates/pediatric")
if (!dir.exists(pediatric_dir )) {
dir.create(pediatric_dir , recursive = TRUE)
}
lollipop_dir <- file.path(pediatric_dir, "plots/lollipop")
lollipop_dir <- file.path(pediatric_dir, "plots/lollipop")
if (!dir.exists(lollipop_dir )) {
dir.create(lollipop_dir , recursive = TRUE)
}
plotmaf_dir <- file.path(pediatric_dir, "plots/plotmaf")
if (!dir.exists(plotmaf_dir )) {
dir.create(plotmaf_dir , recursive = TRUE)
}
oncoplot_dir <- file.path(pediatric_dir, "plots/oncoplot")
if (!dir.exists(oncoplot_dir )) {
dir.create(oncoplot_dir , recursive = TRUE)
}
data_dir <- file.path(root_dir, "data")
getwd()
histology <- readr::read_tsv("OpenPedCan-analysis/data/histologies.tsv")
histology %>% select(cancer_group) %>% table()
library(dplyr)
histology %>% select(cancer_group) %>% table()
see <- histology %>% select(cancer_group) %>% table() %>% as.data.frame()
View(see)
see <- histology %>% filter(sample_type == "Tumor") %>% filter(experimental_strategy == "RNA-Seq") %>% filter(tumor_descriptor == "Initial CNS Tumor") %>% filter(cohort %in% c("PBTA","GMKF")) %>% table() %>% as.data.frame()
see <- histology %>% filter(sample_type == "Tumor") %>% filter(experimental_strategy == "RNA-Seq") %>% filter(tumor_descriptor == "Initial CNS Tumor") %>% filter(cohort %in% c("PBTA","GMKF")) %>% select(cancer_group) %>% table() %>% as.data.frame()
see <- histology %>% filter(sample_type == "Tumor") %>% filter(experimental_strategy == "RNA-Seq") %>% filter(tumor_descriptor == "Initial CNS Tumor") %>% filter(!is.na(OS_days)) %>% filter(!is.na(OS_status)) %>% filter(cohort %in% c("PBTA","GMKF")) %>% select(cancer_group) %>% table() %>% as.data.frame()
see <- histology %>% filter(sample_type == "Tumor") %>% filter(experimental_strategy == "RNA-Seq") %>% filter(tumor_descriptor == "Initial CNS Tumor") %>% filter(!is.na(OS_days)) %>% filter(!is.na(OS_status)) %>% filter(!is.na(PFS_days)) %>% filter(cohort %in% c("PBTA","GMKF")) %>% select(cancer_group) %>% table() %>% as.data.frame()
getwd()
histology <- readr::read_tsv("~/OpenPedCan-analysis/data/histologies.tsv")
View(histology)
no_estimate <- histology %>% filter(sample_type == "Tumor") %>% filter(experimental_strategy == "WXS") %>% filter(is.na(germline_sex_estimate))
library(dplyr)
no_estimate <- histology %>% filter(sample_type == "Tumor") %>% filter(experimental_strategy == "WXS") %>% filter(is.na(germline_sex_estimate))
View(no_estimate)
no_estimate_participants <- no_estimate %>% pull(cohort_participant_id) %>% unique()
no_estimate_participants
no_estimate_participants_match_wgs <- histology %>% filter(cohort_participant_id %in% no_estimate_participants) %>% filter(experimental_strategy == "WGS") %>% filter(sample_type == "Tumor")
View(no_estimate)
no_estimate <- no_estimate %>% select(-germline_sex_estimate)
no_estimate_participants_match_wgs <- histology %>% filter(cohort_participant_id %in% no_estimate_participants) %>% filter(experimental_strategy == "WGS") %>% filter(sample_type == "Tumor") %>% select(cohort_participant_id, germline_sex_estimate)
see <- left_join(no_estimate, no_estimate_participants_match_wgs)
View(see)
View(histology)
getwd()
setwd("/Users/jinr/imaging_related_analyses/molecular_target_radiation")
#### Define Directories ----------------------------------------------------------
root_dir <- rprojroot::find_root(rprojroot::has_dir(".git"))
analysis_dir <- file.path(root_dir, "molecular_target_radiation")
results_dir <- file.path(analysis_dir, "results")
if (!dir.exists(results_dir)) {
dir.create(results_dir , recursive = TRUE)
}
histology_df <- readr::read_tsv("../data/histologies.tsv")
expression_data <- readRDS("../data/gene-expression-rsem-tpm-collapsed.rds")
short_long_match <- readr::read_tsv("../data/short_long_match.tsv")
#### Calculate PFS status based on the PFS days and OS days -----------------------------------
histology_df$PFS_days <- as.numeric(histology_df$PFS_days)
histology_df <- histology_df %>%
dplyr::mutate(PFS_status = if_else(PFS_days < OS_days, 1, 0)) %>%
dplyr::filter(tumor_descriptor == "Initial CNS Tumor") %>%
dplyr::filter(experimental_strategy=="RNA-Seq") %>%
dplyr::filter(!is.na(OS_status)) %>%
dplyr::mutate(os_status_level = case_when(
OS_status == "LIVING" ~ 0,
OS_status == "DECEASED" ~ 1
))
suppressPackageStartupMessages(library("optparse"))
suppressPackageStartupMessages(library("tidyverse"))
suppressPackageStartupMessages(library("readr"))
suppressPackageStartupMessages(library("survival"))
suppressPackageStartupMessages(library("caret"))
suppressPackageStartupMessages(library("cowplot"))
histology_df <- histology_df %>%
dplyr::mutate(PFS_status = if_else(PFS_days < OS_days, 1, 0)) %>%
dplyr::filter(tumor_descriptor == "Initial CNS Tumor") %>%
dplyr::filter(experimental_strategy=="RNA-Seq") %>%
dplyr::filter(!is.na(OS_status)) %>%
dplyr::mutate(os_status_level = case_when(
OS_status == "LIVING" ~ 0,
OS_status == "DECEASED" ~ 1
))
train_stats <- data.frame()
test_stats <- data.frame()
cancer_group_list <- c("LGG","HGG")
i <-1
x <- cancer_group_list[i]
# define directory
cox_survival_plots_dir <- file.path(root_dir, "molecular_target_radiation", "plots",x, "CoxPH_survival")
if (!dir.exists(cox_survival_plots_dir )) {
dir.create(cox_survival_plots_dir , recursive = TRUE)
}
# match the long name to the short name
long_name <- short_long_match %>% filter(short_name == x) %>%
pull(long_name)
# filter to the cohort of interest
cohort_df <- histology_df %>% dplyr::filter(cancer_group %in% long_name) %>%
dplyr::select(Kids_First_Biospecimen_ID, os_status_level, OS_days, PFS_status,PFS_days, CNS_region, harmonized_diagnosis)
# get biospecimen ID's for samples
cohort_bsid <- cohort_df %>% pull(Kids_First_Biospecimen_ID) %>% unique()
j=1
gene_list <- c("SLC7A5","FOHL1")
y <- gene_list[j]
# subset to gene and sample of interest
expression_of_interest <- expression_data %>% dplyr::select(all_of(cohort_bsid)) %>%
tibble::rownames_to_column("GeneSymbol") %>%
dplyr::filter(GeneSymbol ==y) %>%
tibble::column_to_rownames("GeneSymbol") %>%
t() %>% as.data.frame() %>%
tibble::rownames_to_column("Kids_First_Biospecimen_ID")
#annotate relevant clinical information to the expression data frame
combined_annotated <- expression_of_interest %>% dplyr::left_join(cohort_df)
View(expression_data)
View(combined_annotated)
View(combined_annotated)
########################################## survival analysis OS
# separate
set.seed(236)
# change the columns to desired type
combined_annotated$harmonized_diagnosis <- as.factor(combined_annotated$harmonized_diagnosis)
combined_annotated$CNS_region <- as.factor(combined_annotated$CNS_region)
trainIndex <- createDataPartition(combined_annotated$os_status_level, p = 0.6,
list = FALSE,
times = 1)
data_train <- combined_annotated[trainIndex, ]
data_test <- combined_annotated[-trainIndex, ]
# Define models
model_gene <- as.formula(paste0("survival::Surv(OS_days, os_status_level) ~ harmonized_diagnosis + CNS_region + ",y))
coxph_train_gene <- survival::coxph(model_gene,
data = data_train)
# generate the stats summary
coxph_train_gene_sum_os <- as.data.frame(summary(coxph_train_gene)$coefficients, keep.rownames = T) %>%
tibble::rownames_to_column() %>%
mutate(cancer_group =x,
gene_list = y,
survival = "OS")
# define between risk groups
train_risk_gene <- predict(coxph_train_gene, type = "risk")
med_risk_gene<- median(train_risk_gene)
# assign the groups between rish groups
test_risk_gene <- predict(coxph_train_gene, newdata = data_test, type = "risk") %>%
as.data.frame() %>% cbind(data_test) %>%
dplyr::rename("RiskScore" = ".") %>%
dplyr::mutate(RiskGroup = case_when(
RiskScore > med_risk_gene ~ "High",
RiskScore <= med_risk_gene ~ "Low"
))
# make risk groups into factors
test_risk_gene$RiskGroup <- as.factor(test_risk_gene$RiskGroup)
# calculate stats for risk group per gene
coxph_riskgroup_gene <- survival::coxph(formula = Surv(OS_days, os_status_level) ~  RiskGroup,
data = test_risk_gene)
coxph_riskgroup_gene_sum <- as.data.frame(summary(coxph_riskgroup_gene)$coefficients) %>%
tibble::rownames_to_column()
# calculate stats for risk score per gene
coxph_riskscore_gene <- survival::coxph(formula = Surv(OS_days, os_status_level) ~  RiskScore,
data = test_risk_gene)
coxph_riskscore_gene_sum <- as.data.frame(summary(coxph_riskscore_gene)$coefficients) %>%
tibble::rownames_to_column()
combined_coxph_sum_os <- rbind(coxph_riskgroup_gene_sum, coxph_riskscore_gene_sum) %>%
mutate(cancer_group =x,
gene_list = y,
survival = "OS")
View(test_risk_gene)
View(test_risk_gene)
View(test_risk_gene)
# generate boxplots showing the expression of high vs. low risk group
p<-test_risk_gene %>%
ggplot( aes(x=RiskGroup, y=x)) +
geom_violin(width=1.4, trim=TRUE, show.legend = F, aes(fill=RiskGroup)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=RiskGroup)) +
labs(title=paste0(x," Expression of Risk Groups"),x="Risk Group", y = paste0(x," TPM Value")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# generate boxplots showing the expression of high vs. low risk group
test_risk_gene %>%
ggplot( aes(x=RiskGroup, y=x)) +
geom_violin(width=1.4, trim=TRUE, show.legend = F, aes(fill=RiskGroup)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=RiskGroup)) +
labs(title=paste0(x," Expression of Risk Groups"),x="Risk Group", y = paste0(x," TPM Value")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# generate boxplots showing the expression of high vs. low risk group
test_risk_gene %>%
ggplot( aes(x=RiskGroup, y=y)) +
geom_violin(width=1.4, trim=TRUE, show.legend = F, aes(fill=RiskGroup)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=RiskGroup)) +
labs(title=paste0(x," Expression of Risk Groups"),x="Risk Group", y = paste0(x," TPM Value")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# generate boxplots showing the expression of high vs. low risk group
test_risk_gene %>%
ggplot( aes(x=RiskGroup, y=y)) +
geom_violin(width=1.4, trim=TRUE, show.legend = F, aes(fill=RiskGroup)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=RiskGroup)) +
labs(title=paste0(y," Expression of Risk Groups"),x="Risk Group", y = paste0(y," TPM Value")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# generate boxplots showing the expression of high vs. low risk group
test_risk_gene %>%
ggplot( aes(x=RiskGroup, y=SLC7A5)) +
geom_violin(width=1.4, trim=TRUE, show.legend = F, aes(fill=RiskGroup)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=RiskGroup)) +
labs(title=paste0(y," Expression of Risk Groups"),x="Risk Group", y = paste0(y," TPM Value")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# generate boxplots showing the expression of high vs. low risk group
test_risk_gene %>%
ggplot( aes(x=RiskGroup, y=SLC7A5)) +
geom_violin(width=1.4, trim=TRUE, show.legend = F, aes(fill=RiskGroup)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=RiskGroup)) +
labs(title=paste0(y," Expression of Risk Groups"),x="Risk Group", y = paste0(y," TPM Value"))
# generate boxplots showing the expression of high vs. low risk group
test_risk_gene %>%
ggplot( aes(x=RiskGroup, y=SLC7A5)) +
geom_violin(width=1, trim=TRUE, show.legend = F, aes(fill=RiskGroup)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=RiskGroup)) +
labs(title=paste0(y," Expression of Risk Groups"),x="Risk Group", y = paste0(y," TPM Value"))
# assign the groups between risk groups
test_risk_gene <- predict(coxph_train_gene, newdata = data_test, type = "risk") %>%
as.data.frame() %>% cbind(data_test) %>%
dplyr::rename("RiskScore" = ".") %>%
dplyr::mutate(RiskGroup = case_when(
RiskScore > med_risk_gene ~ "High",
RiskScore <= med_risk_gene ~ "Low"
)) %>%
dplyr::rename(gene_of_interest = y)
# assign the groups between risk groups
test_risk_gene <- predict(coxph_train_gene, newdata = data_test, type = "risk") %>%
as.data.frame() %>% cbind(data_test) %>%
dplyr::rename("RiskScore" = ".") %>%
dplyr::mutate(RiskGroup = case_when(
RiskScore > med_risk_gene ~ "High",
RiskScore <= med_risk_gene ~ "Low"
)) %>%
dplyr::rename(gene_of_interest = all_of(y))
# generate boxplots showing the expression of high vs. low risk group
test_risk_gene %>%
ggplot( aes(x=RiskGroup, y=gene_of_interest)) +
geom_violin(width=1, trim=TRUE, show.legend = F, aes(fill=RiskGroup)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=RiskGroup)) +
labs(title=paste0(y," Expression of Risk Groups"),x="Risk Group", y = paste0(y," TPM Value"))
# assign the groups between rish groups
test_risk_gene <- predict(coxph_train_gene, newdata = data_test, type = "risk") %>%
as.data.frame() %>% cbind(data_test) %>%
dplyr::rename("RiskScore" = ".") %>%
dplyr::mutate(RiskGroup = case_when(
RiskScore > med_risk_gene ~ "High",
RiskScore <= med_risk_gene ~ "Low"
)) %>%
dplyr::rename(gene_of_interest = all_of(y)) %>%
dplyr::group_by(RiskGroup) %>%
dplyr::summarize(n=n()) %>%
dplyr::mutate(risk_group_n = paste0(RiskGroup, " n=", n))
View(test_risk_gene)
#calculate n for each risk group
test_risk_n <- test_risk_gene %>%
dplyr::group_by(RiskGroup) %>%
dplyr::summarize(n=n()) %>%
dplyr::mutate(risk_group_n = paste0(RiskGroup, " n=", n))
# assign the groups between risk groups
test_risk_gene <- predict(coxph_train_gene, newdata = data_test, type = "risk") %>%
as.data.frame() %>% cbind(data_test) %>%
dplyr::rename("RiskScore" = ".") %>%
dplyr::mutate(RiskGroup = case_when(
RiskScore > med_risk_gene ~ "High",
RiskScore <= med_risk_gene ~ "Low"
)) %>%
dplyr::rename(gene_of_interest = all_of(y))
#calculate n for each risk group
test_risk_n <- test_risk_gene %>%
dplyr::group_by(RiskGroup) %>%
dplyr::summarize(n=n()) %>%
dplyr::mutate(risk_group_n = paste0(RiskGroup, " n=", n))
#add n to the risk groups
test_risk_gene <- test_risk_gene %>%
dplyr::left_join(test_risk_n)
# assign the groups between risk groups
test_risk_gene <- predict(coxph_train_gene, newdata = data_test, type = "risk") %>%
as.data.frame() %>% cbind(data_test) %>%
dplyr::rename("RiskScore" = ".") %>%
dplyr::mutate(RiskGroup = case_when(
RiskScore > med_risk_gene ~ "High",
RiskScore <= med_risk_gene ~ "Low"
)) %>%
dplyr::rename(gene_of_interest = all_of(y))
#calculate n for each risk group
test_risk_n <- test_risk_gene %>%
dplyr::group_by(RiskGroup) %>%
dplyr::summarize(n=n()) %>%
dplyr::mutate(risk_group_n = paste0(RiskGroup, " n=", n))
#add n to the risk groups
test_risk_gene <- test_risk_gene %>%
dplyr::left_join(test_risk_n)
View(test_risk_gene)
# generate boxplots showing the expression of high vs. low risk group
test_risk_gene %>%
ggplot( aes(x=test_risk_n, y=gene_of_interest)) +
geom_violin(width=1, trim=TRUE, show.legend = F, aes(fill=test_risk_n)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=test_risk_n)) +
labs(title=paste0(y," Expression of Risk Groups"),x="Risk Group", y = paste0(y," TPM Value"))
View(test_risk_gene)
# generate boxplots showing the expression of high vs. low risk group
test_risk_gene %>%
ggplot( aes(x=risk_group_n, y=gene_of_interest)) +
geom_violin(width=1, trim=TRUE, show.legend = F, aes(fill=risk_group_n)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=risk_group_n)) +
labs(title=paste0(y," Expression of Risk Groups"),x="Risk Group", y = paste0(y," TPM Value"))
# generate boxplots showing the expression of high vs. low risk group
test_risk_gene %>%
ggplot( aes(x=risk_group_n, y=gene_of_interest)) +
geom_violin(width=1, trim=TRUE, show.legend = F, aes(fill=risk_group_n)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=risk_group_n)) +
labs(title=paste0(y," Expression of Risk Groups"),x="Risk Group", y = paste0(y," TPM Value")) +
theme(axis.text = element_text(size = 20))
# generate boxplots showing the expression of high vs. low risk group
test_risk_gene %>%
ggplot( aes(x=risk_group_n, y=gene_of_interest)) +
geom_violin(width=1, trim=TRUE, show.legend = F, aes(fill=risk_group_n)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=risk_group_n)) +
labs(title=paste0(y," Expression of Risk Groups"),x="Risk Group", y = paste0(y," TPM Value")) +
theme(axis.text.x = element_text(size = 20))
# generate boxplots showing the expression of high vs. low risk group
test_risk_gene %>%
ggplot( aes(x=risk_group_n, y=gene_of_interest)) +
geom_violin(width=1, trim=TRUE, show.legend = F, aes(fill=risk_group_n)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=risk_group_n)) +
labs(title=paste0(y," Expression of Risk Groups"),x="Risk Group", y = paste0(y," TPM Value")) +
theme(axis.text.x = element_text(size = 16))
# generate boxplots showing the expression of high vs. low risk group
test_risk_gene %>%
ggplot( aes(x=risk_group_n, y=gene_of_interest)) +
geom_violin(width=1, trim=TRUE, show.legend = F, aes(fill=risk_group_n)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=risk_group_n)) +
labs(title=paste0(y," Expression of Risk Groups"),x="Risk Group", y = paste0(y," TPM Value")) +
theme(axis.text.x = element_text(size = 16))  +
stat_compare_means(method = "t.test")
library(ggpubr)
# generate boxplots showing the expression of high vs. low risk group
test_risk_gene %>%
ggplot( aes(x=risk_group_n, y=gene_of_interest)) +
geom_violin(width=1, trim=TRUE, show.legend = F, aes(fill=risk_group_n)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=risk_group_n)) +
labs(title=paste0(y," Expression of Risk Groups"),x="Risk Group", y = paste0(y," TPM Value")) +
theme(axis.text.x = element_text(size = 16))  +
stat_compare_means(method = "t.test")
# generate boxplots showing the expression of high vs. low risk group
test_risk_gene %>%
ggplot( aes(x=risk_group_n, y=gene_of_interest)) +
geom_violin(width=1, trim=TRUE, show.legend = F, aes(fill=risk_group_n)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=risk_group_n)) +
labs(title=paste0(y," Expression of Risk Groups"),x="Risk Group", y = paste0(y," TPM Value")) +
theme(axis.text.x = element_text(size = 16))  +
stat_compare_means()
# generate boxplots showing the expression of high vs. low risk group
exp_plot <- test_risk_gene %>%
ggplot( aes(x=risk_group_n, y=gene_of_interest)) +
geom_violin(width=1, trim=TRUE, show.legend = F, aes(fill=risk_group_n)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=risk_group_n)) +
labs(title=paste0(y," Expression of Risk Groups"),x="Risk Group", y = paste0(y," TPM Value")) +
theme(axis.text.x = element_text(size = 16))  +
stat_compare_means()
exp_plot$layers[[2]]$aes_params$textsize <- 16
exp_plot
# generate boxplots showing the expression of high vs. low risk group
exp_plot <- test_risk_gene %>%
ggplot( aes(x=risk_group_n, y=gene_of_interest)) +
geom_violin(width=1, trim=TRUE, show.legend = F, aes(fill=risk_group_n)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=risk_group_n)) +
labs(title=paste0(y," Expression of Risk Groups"),x="Risk Group", y = paste0(y," TPM Value")) +
theme(axis.text.x = element_text(size = 16))  +
stat_compare_means()
exp_plot$layers[[2]]$aes_params$textsize <- 16
exp_plot
exp_plot$layers[[2]]$aes_params$textsize <- 20
exp_plot
# generate boxplots showing the expression of high vs. low risk group
exp_plot <- test_risk_gene %>%
ggplot( aes(x=risk_group_n, y=gene_of_interest)) +
geom_violin(width=1, trim=TRUE, show.legend = F, aes(fill=risk_group_n)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=risk_group_n)) +
labs(title=paste0(y," Expression of Risk Groups"),x="Risk Group", y = paste0(y," TPM Value")) +
theme(axis.text.x = element_text(size = 16))  +
stat_compare_means(size = 16)
exp_plot$layers[[2]]$aes_params$textsize <- 20
exp_plot
# generate boxplots showing the expression of high vs. low risk group
exp_plot <- test_risk_gene %>%
ggplot( aes(x=risk_group_n, y=gene_of_interest)) +
geom_violin(width=1, trim=TRUE, show.legend = F, aes(fill=risk_group_n)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=risk_group_n)) +
labs(title=paste0(y," Expression of Risk Groups"),x="Risk Group", y = paste0(y," TPM Value")) +
theme(axis.text.x = element_text(size = 16))  +
stat_compare_means(size = 10)
exp_plot
# generate boxplots showing the expression of high vs. low risk group
exp_plot <- test_risk_gene %>%
ggplot( aes(x=risk_group_n, y=gene_of_interest)) +
geom_violin(width=1, trim=TRUE, show.legend = F, aes(fill=risk_group_n)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=risk_group_n)) +
labs(title=paste0(y," Expression of Risk Groups"),x="Risk Group", y = paste0(y," TPM Value")) +
theme(axis.text.x = element_text(size = 16))  +
stat_compare_means(size = 6)
exp_plot
check <- readr::read_tsv("~/Downloads/gene-level-cnv-consensus-annotated-mut-freq.tsv-2.gz")
