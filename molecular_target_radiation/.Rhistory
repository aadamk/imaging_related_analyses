# Define models
model_gene <- as.formula(paste0("survival::Surv(OS_days, os_status_level) ~ harmonized_diagnosis + CNS_region + ",y))
coxph_train_gene <- survival::coxph(model_gene,
data = data_train)
# generate the stats summary
coxph_train_gene_sum_os <- as.data.frame(summary(coxph_train_gene)$coefficients, keep.rownames = T) %>%
tibble::rownames_to_column() %>%
mutate(cancer_group =x,
gene_list = y,
survival = "OS")
# define between risk groups
train_risk_gene <- predict(coxph_train_gene, type = "risk")
View(test_risk_gene)
View(combined_annotated)
View(coxph_train_gene_sum_os)
length(unique(test_risk_gene$RiskGroup))>1
# define directory
cox_survival_plots_dir <- file.path(root_dir, "molecular_target_radiation", "plots",x, "CoxPH_survival")
if (!dir.exists(cox_survival_plots_dir )) {
dir.create(cox_survival_plots_dir , recursive = TRUE)
}
# match the long name to the short name
long_name <- short_long_match %>% filter(short_name == x) %>%
pull(long_name)
# filter to the cohort of interest
cohort_df <- histology_df %>% dplyr::filter(cancer_group %in% long_name) %>%
dplyr::select(Kids_First_Biospecimen_ID, os_status_level, OS_days, PFS_status,PFS_days, CNS_region, harmonized_diagnosis)
# get biospecimen ID's for samples
cohort_bsid <- cohort_df %>% pull(Kids_First_Biospecimen_ID) %>% unique()
# subset to gene and sample of interest
expression_of_interest <- expression_data %>% dplyr::select(all_of(cohort_bsid)) %>%
tibble::rownames_to_column("GeneSymbol") %>%
dplyr::filter(GeneSymbol ==y) %>%
tibble::column_to_rownames("GeneSymbol") %>%
t() %>% as.data.frame() %>%
tibble::rownames_to_column("Kids_First_Biospecimen_ID")
#annotate relevant clinical information to the expression data frame
combined_annotated <- expression_of_interest %>% dplyr::left_join(cohort_df)
########################################## survival analysis OS
# separate
set.seed(236)
# change the columns to desired type
combined_annotated$harmonized_diagnosis <- as.factor(combined_annotated$harmonized_diagnosis)
combined_annotated$CNS_region <- as.factor(combined_annotated$CNS_region)
trainIndex <- createDataPartition(combined_annotated$os_status_level, p = 0.6,
list = FALSE,
times = 1)
data_train <- combined_annotated[trainIndex, ]
data_test <- combined_annotated[-trainIndex, ]
# Define models
model_gene <- as.formula(paste0("survival::Surv(OS_days, os_status_level) ~ harmonized_diagnosis + CNS_region + ",y))
coxph_train_gene <- survival::coxph(model_gene,
data = data_train)
# generate the stats summary
coxph_train_gene_sum_os <- as.data.frame(summary(coxph_train_gene)$coefficients, keep.rownames = T) %>%
tibble::rownames_to_column() %>%
mutate(cancer_group =x,
gene_list = y,
survival = "OS")
# define between risk groups
train_risk_gene <- predict(coxph_train_gene, type = "risk")
med_risk_gene<- median(train_risk_gene)
# assign the groups between risk groups
test_risk_gene <- predict(coxph_train_gene, newdata = data_test, type = "risk") %>%
as.data.frame() %>% cbind(data_test) %>%
dplyr::rename("RiskScore" = ".") %>%
dplyr::mutate(RiskGroup = case_when(
RiskScore > med_risk_gene ~ "High",
RiskScore <= med_risk_gene ~ "Low"
)) %>%
dplyr::rename(gene_of_interest = all_of(y))
# make risk groups into factors
test_risk_gene$RiskGroup <- as.factor(test_risk_gene$RiskGroup)
# calculate stats for risk score per gene
coxph_riskscore_gene_sum <- data.frame()
colnames(coxph_riskscore_gene_sum) <- c(x,y,"OS")
x<- "ATRT"
y <-"SLC7A5"
# define directory
cox_survival_plots_dir <- file.path(root_dir, "molecular_target_radiation", "plots",x, "CoxPH_survival")
if (!dir.exists(cox_survival_plots_dir )) {
dir.create(cox_survival_plots_dir , recursive = TRUE)
}
# match the long name to the short name
long_name <- short_long_match %>% filter(short_name == x) %>%
pull(long_name)
# filter to the cohort of interest
cohort_df <- histology_df %>% dplyr::filter(cancer_group %in% long_name) %>%
dplyr::select(Kids_First_Biospecimen_ID, os_status_level, OS_days, PFS_status,PFS_days, CNS_region, harmonized_diagnosis)
# get biospecimen ID's for samples
cohort_bsid <- cohort_df %>% pull(Kids_First_Biospecimen_ID) %>% unique()
# subset to gene and sample of interest
expression_of_interest <- expression_data %>% dplyr::select(all_of(cohort_bsid)) %>%
tibble::rownames_to_column("GeneSymbol") %>%
dplyr::filter(GeneSymbol ==y) %>%
tibble::column_to_rownames("GeneSymbol") %>%
t() %>% as.data.frame() %>%
tibble::rownames_to_column("Kids_First_Biospecimen_ID")
#annotate relevant clinical information to the expression data frame
combined_annotated <- expression_of_interest %>% dplyr::left_join(cohort_df)
########################################## survival analysis OS
# separate
set.seed(236)
# change the columns to desired type
combined_annotated$harmonized_diagnosis <- as.factor(combined_annotated$harmonized_diagnosis)
combined_annotated$CNS_region <- as.factor(combined_annotated$CNS_region)
trainIndex <- createDataPartition(combined_annotated$os_status_level, p = 0.6,
list = FALSE,
times = 1)
data_train <- combined_annotated[trainIndex, ]
data_test <- combined_annotated[-trainIndex, ]
# Define models
model_gene <- as.formula(paste0("survival::Surv(OS_days, os_status_level) ~ harmonized_diagnosis + CNS_region + ",y))
coxph_train_gene <- survival::coxph(model_gene,
data = data_train)
# generate the stats summary
coxph_train_gene_sum_os <- as.data.frame(summary(coxph_train_gene)$coefficients, keep.rownames = T) %>%
tibble::rownames_to_column() %>%
mutate(cancer_group =x,
gene_list = y,
survival = "OS")
getwd()
getwd("/Users/jinr/OMPARE/code/tier_classification")
setwd("/Users/jinr/OMPARE/code/tier_classification")
oncokb_anno <- readr::read_tsv("~/Downloads/oncokb_consensus_annotated.txt")
View(oncokb_anno)
Variant_Classification %in% colnames(oncokb_anno)
"Variant_Classification" %in% colnames(oncokb_anno)
oncokb_anno$Variant_Classification %>% unique()
library(dplyr)
oncokb_anno$Variant_Classification %>% unique()
maf <- readr::read_tsv("~/Downloads/00caef03-6e77-47ef-8582-c29836fce20e.consensus_somatic.protected.maf", skip=1)
View(maf)
maf$Variant_Classification %>% unique()
maf_combined <- readRDS)"~/Downloads/pnoc008_consensus_maf_combined.rds"
maf_combined <- readRDS("~/Downloads/pnoc008_consensus_maf_combined.rds")
maf_combined$Variant_Classification %>% unique()
colnames(maf )
# calculate VAF for subsequent classification
oncokb_anno <- oncokb_anno %>%
dplyr::mutate(VAF = t_alt_count/(t_alt_count+t_ref_count))
colnames(oncokb_anno)
oncokb_anno %>% select(Existing_variation) %>% unique()
oncokb_anno %>% select(SIFT) %>% unique()
oncokb_anno %>% select(Polyphen) %>% unique()
oncokb_anno %>% select(PolyPhen) %>% unique()
View(oncokb_anno)
getwd()
setwd("/Users/jinr/imaging_related_analyses/molecular_target_radiation")
suppressPackageStartupMessages(library("optparse"))
suppressPackageStartupMessages(library("tidyverse"))
suppressPackageStartupMessages(library("car"))
suppressPackageStartupMessages(library("multcomp"))
suppr
suppressPackageStartupMessages(library("optparse"))
suppressPackageStartupMessages(library("tidyverse"))
suppressPackageStartupMessages(library("car"))
suppressPackageStartupMessages(library("multcomp"))
suppressPackageStartupMessages(library("ggpubr"))
#### Define Directories ----------------------------------------------------------
root_dir <- rprojroot::find_root(rprojroot::has_dir(".git"))
stats_anova_dir <- file.path(root_dir, "molecular_target_radiation", "stats", "anova")
stats_tukey_dir <- file.path(root_dir, "molecular_target_radiation", "stats", "tukey")
tpm_plots_dir <- file.path(root_dir, "molecular_target_radiation", "plots", "TPM_violin")
if (!dir.exists(stats_anova_dir )) {
dir.create(stats_anova_dir , recursive = TRUE)
}
if (!dir.exists(stats_tukey_dir )) {
dir.create(stats_tukey_dir , recursive = TRUE)
}
if (!dir.exists(tpm_plots_dir )) {
dir.create(tpm_plots_dir , recursive = TRUE)
}
histology_df <- readr::read_tsv("../data/histologies.tsv")
expression_data <- readRDS("../data/gene-expression-rsem-tpm-collapsed.rds")
short_long_match <- readr::read_tsv("../data/short_long_match.tsv")
cancer_group_list <- c("LGG","HGG","Medullo","ATRT","EPN","Cranio")
#### Filter to the cancer group of interest -----------------------------------
cohort_df_list <- lapply(cancer_group_list, function(x){
cancer_group_long <- short_long_match %>%
filter(short_name ==x) %>%
pull(long_name)
cohort_df_each <- histology_df %>%
# keep only initial CNV tumor
dplyr::filter(sample_type == "Tumor") %>%
dplyr::filter(tumor_descriptor == "Initial CNS Tumor") %>%
# does not include TCGA or GTEx
dplyr::filter(cohort %in% c("PBTA","GMKF","TARGET")) %>%
dplyr::filter(experimental_strategy=="RNA-Seq") %>%
dplyr::filter(cancer_group %in% cancer_group_long) %>%
# exclude derived cell line
dplyr::filter(composition != "Derived Cell Line") %>%
# keep only unique Kids First Participant
dplyr::distinct(Kids_First_Participant_ID, .keep_all = TRUE) %>%
dplyr::select(Kids_First_Biospecimen_ID, harmonized_diagnosis) %>%
dplyr::mutate(short_name = x)
})
cohort_df <- do.call(rbind,cohort_df_list)
x<-"SLC7A6"
x<-"SLC7A5"
cohort_bsid <- cohort_df %>% pull(Kids_First_Biospecimen_ID) %>% unique()
expression_of_interest <- expression_data %>% dplyr::select(all_of(cohort_bsid)) %>%
tibble::rownames_to_column("GeneSymbol") %>%
dplyr::filter(GeneSymbol ==x) %>%
tibble::column_to_rownames("GeneSymbol") %>%
t() %>% as.data.frame() %>%
tibble::rownames_to_column("Kids_First_Biospecimen_ID")
#annotate relevant clinical information to the expression data frame
combined <- expression_of_interest %>% dplyr::left_join(cohort_df) %>%
dplyr::rename(gene_of_interest = x)
# get ready for calculating statistics
combined_fixed <- combined %>% mutate(harmonized_diagnosis = gsub("-","_", harmonized_diagnosis))
n_sample_hd <- combined_fixed %>% group_by(harmonized_diagnosis) %>% summarize(n=n())
combined_fixed <- combined_fixed %>%
dplyr::left_join(n_sample_hd) %>%
dplyr::mutate(harmonized_diagnosis = paste0(harmonized_diagnosis, " ", "n=", n)) %>%
dplyr::mutate(harmonized_diagnosis = paste0(short_name, "_", harmonized_diagnosis))
# calculate statistics
res_aov <- aov(combined_fixed$gene_of_interest ~ combined_fixed$harmonized_diagnosis,
data = combined_fixed)
summary(res_aov)
anova_result <- summary(res_aov)[[1]] %>%
tibble::rownames_to_column() %>%
mutate(gene = x)
anova_results <- rbind(anova_results, anova_result)
tukey.test<-TukeyHSD(res_aov)[1] %>% as.data.frame() %>% tibble::rownames_to_column()
#### Generate figures and statistics for each gene ----------------------------------
anova_results <- data.frame()
tukey_results <- data.frame()
anova_results <- rbind(anova_results, anova_result)
colnames(tukey.test) <- c("Pair Compared", "DIFF", "LWR", "UPR", "P.adj")
tukey_test_heatmap <- tukey.test %>% arrange(P.adj, descending = TRUE) %>%
mutate(gene=x) %>%
tidyr::separate(col = `Pair Compared`, into = c("group1", "group2"), sep = "-") %>%
rename(p.adj = P.adj)
# generate data frame for adding statistics for violin plot
tukey_test_violin <- tukey_test_heatmap %>%
mutate(.y. = "harmonized_diagnosis") %>%
dplyr::select(.y., group1, group2, p.adj) %>% tibble() %>%
filter(p.adj <=0.01)
tukey_test_violin <-tukey_test_violin %>%
mutate(y.position = seq(0.6*max(combined_fixed$gene_of_interest), 1.5*max(combined_fixed$gene_of_interest), length.out = nrow(tukey_test_violin)))
tukey_test_violin$p.adj <- round(tukey_test_violin$p.adj, digits=6)
combined_fixed %>%
ggplot( aes(x=harmonized_diagnosis, y=gene_of_interest)) +
geom_violin(width=1.4, trim=TRUE, show.legend = F, aes(fill=harmonized_diagnosis)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=harmonized_diagnosis)) +
labs(title=paste0(x," TPM per Harmonized Diagnosis"),x="Harmonized Diagnosis", y = paste0(x," TPM Value")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
stat_pvalue_manual(tukey_test_violin, label = "p.adj") + facet_grid(.~ short_name)
View(combined_fixed)
combined_fixed %>%
ggplot( aes(x=harmonized_diagnosis, y=gene_of_interest)) +
geom_violin(width=1.4, trim=TRUE, show.legend = F, aes(fill=harmonized_diagnosis)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=harmonized_diagnosis)) +
labs(title=paste0(x," TPM per Harmonized Diagnosis"),x="Harmonized Diagnosis", y = paste0(x," TPM Value")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
stat_pvalue_manual(tukey_test_violin, label = "p.adj") + facet_wrap(~ short_name)
combined_fixed %>%
ggplot( aes(x=harmonized_diagnosis, y=gene_of_interest)) +
geom_violin(width=1.4, trim=TRUE, show.legend = F, aes(fill=harmonized_diagnosis)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=harmonized_diagnosis)) +
labs(title=paste0(x," TPM per Harmonized Diagnosis"),x="Harmonized Diagnosis", y = paste0(x," TPM Value")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
stat_pvalue_manual(tukey_test_violin, label = "p.adj") + facet_wrap(~ combined_fixed$short_name)
combined_fixed %>%
ggplot( aes(x=harmonized_diagnosis, y=gene_of_interest)) +
geom_violin(width=1.4, trim=TRUE, show.legend = F, aes(fill=harmonized_diagnosis)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=harmonized_diagnosis)) +
labs(title=paste0(x," TPM per Harmonized Diagnosis"),x="Harmonized Diagnosis", y = paste0(x," TPM Value")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
stat_pvalue_manual(tukey_test_violin, label = "p.adj")
combined_fixed %>%
group_by(short_name) %>%
ggplot( aes(x=harmonized_diagnosis, y=gene_of_interest)) +
geom_violin(width=1.4, trim=TRUE, show.legend = F, aes(fill=harmonized_diagnosis)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=harmonized_diagnosis)) +
labs(title=paste0(x," TPM per Harmonized Diagnosis"),x="Harmonized Diagnosis", y = paste0(x," TPM Value")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))  + facet_grid(~short_name)
violin_plot <- combined_fixed %>%
group_by(short_name) %>%
ggplot( aes(x=harmonized_diagnosis, y=gene_of_interest)) +
geom_violin(width=1.4, trim=TRUE, show.legend = F, aes(fill=harmonized_diagnosis)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=harmonized_diagnosis)) +
labs(title=paste0(x," TPM per Harmonized Diagnosis"),x="Harmonized Diagnosis", y = paste0(x," TPM Value")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
facet_grid(~short_name, scales = "free_x")
violin_plot <- combined_fixed %>%
group_by(short_name) %>%
ggplot( aes(x=harmonized_diagnosis, y=gene_of_interest)) +
geom_violin(width=1.4, trim=TRUE, show.legend = F, aes(fill=harmonized_diagnosis)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=harmonized_diagnosis)) +
labs(title=paste0(x," TPM per Harmonized Diagnosis"),x="Harmonized Diagnosis", y = paste0(x," TPM Value")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
facet_grid(short_name ~, scales = "free_x")
violin_plot <- combined_fixed %>%
group_by(short_name) %>%
ggplot( aes(x=harmonized_diagnosis, y=gene_of_interest)) +
geom_violin(width=1.4, trim=TRUE, show.legend = F, aes(fill=harmonized_diagnosis)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=harmonized_diagnosis)) +
labs(title=paste0(x," TPM per Harmonized Diagnosis"),x="Harmonized Diagnosis", y = paste0(x," TPM Value")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
facet_grid(short_name ~., scales = "free_x")
combined_fixed %>%
group_by(short_name) %>%
ggplot( aes(x=harmonized_diagnosis, y=gene_of_interest)) +
geom_violin(width=1.4, trim=TRUE, show.legend = F, aes(fill=harmonized_diagnosis)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=harmonized_diagnosis)) +
labs(title=paste0(x," TPM per Harmonized Diagnosis"),x="Harmonized Diagnosis", y = paste0(x," TPM Value")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
facet_grid(short_name ~., scales = "free_x")
combined_fixed %>%
group_by(short_name) %>%
ggplot( aes(x=harmonized_diagnosis, y=gene_of_interest)) +
geom_violin(width=1.4, trim=TRUE, show.legend = F, aes(fill=harmonized_diagnosis)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=harmonized_diagnosis)) +
labs(title=paste0(x," TPM per Harmonized Diagnosis"),x="Harmonized Diagnosis", y = paste0(x," TPM Value")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
facet_grid(~ short_name , scales = "free_x")
combined_fixed %>%
group_by(short_name) %>%
ggplot( aes(x=harmonized_diagnosis, y=gene_of_interest)) +
geom_violin(width=1.4, trim=TRUE, show.legend = F, aes(fill=harmonized_diagnosis)) +
geom_boxplot(width=0.1, color="black", show.legend = F,aes(fill=harmonized_diagnosis)) +
labs(title=paste0(x," TPM per Harmonized Diagnosis"),x="Harmonized Diagnosis", y = paste0(x," TPM Value")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
facet_grid(~ short_name, scales = "free", space = "free")
# Generate complete dataframe for plotting heatmap
tukey_test_heatmap_filled <- tukey_test_heatmap %>%
rename(group2=group1,
group1=group2)
tukey_heatmap_complete <- rbind(tukey_test_heatmap, tukey_test_heatmap_filled)
View(tukey_heatmap_complete)
test <- tukey_heatmap_complete %>% mutate(group_1_short = gsub("_*", "", group1)
)
View(test)
test <- tukey_heatmap_complete %>% mutate(group_1_short = gsub("_*$", "", group1))
test <- tukey_heatmap_complete %>% mutate(group_1_short = gsub("\\_.*", "", group1))
tukey_heatmap_complete <- rbind(tukey_test_heatmap, tukey_test_heatmap_filled) %>%
mutate(group_1_short = gsub("_*$", "", group1)) %>%
mutate(group_2_short = gsub("_*$", "", group2))
View(tukey_heatmap_complete)
tukey_heatmap_complete <- rbind(tukey_test_heatmap, tukey_test_heatmap_filled) %>%
mutate(group_1_short = gsub("\\_.*", "", group1)) %>%
mutate(group_2_short = gsub("\\_.*", "", group2))
View(tukey_heatmap_complete)
ggplot(tukey_heatmap_complete, aes(x=group1, group2, fill= p.adj)) +
geom_tile(aes(fill=p.adj)) +
labs(title=paste0(x," Harmonized Diagnosis Tukey Test for TPM"),x="Harmonized Diagnosis", y = "Harmonized Diagnosis") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_gradient(low="red", high="white") + facet_wrap(~short_name,)
ggplot(tukey_heatmap_complete, aes(x=group1, group2, fill= p.adj)) +
geom_tile(aes(fill=p.adj)) +
labs(title=paste0(x," Harmonized Diagnosis Tukey Test for TPM"),x="Harmonized Diagnosis", y = "Harmonized Diagnosis") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_gradient(low="red", high="white") + facet_wrap(~group_1_short,)
ggplot(tukey_heatmap_complete, aes(x=group1, group2, fill= p.adj)) +
geom_tile(aes(fill=p.adj)) +
labs(title=paste0(x," Harmonized Diagnosis Tukey Test for TPM"),x="Harmonized Diagnosis", y = "Harmonized Diagnosis") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_gradient(low="red", high="white") + facet_grid(~group_1_short,)
ggplot(tukey_heatmap_complete, aes(x=group1, group2, fill= p.adj)) +
geom_tile(aes(fill=p.adj)) +
labs(title=paste0(x," Harmonized Diagnosis Tukey Test for TPM"),x="Harmonized Diagnosis", y = "Harmonized Diagnosis") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_gradient(low="red", high="white") + facet_grid(~group_1_short, scales = "free", space = "free")
tukey_heatmap_complete <- rbind(tukey_test_heatmap, tukey_test_heatmap_filled) %>%
mutate(group_1_short = gsub("\\_.*", "", group1)) %>%
mutate(group_2_short = gsub("\\_.*", "", group2)) %>%
filter(p.adj <0.05)
ggplot(tukey_heatmap_complete, aes(x=group1, group2, fill= p.adj)) +
geom_tile(aes(fill=p.adj)) +
labs(title=paste0(x," Harmonized Diagnosis Tukey Test for TPM"),x="Harmonized Diagnosis", y = "Harmonized Diagnosis") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_gradient(low="red", high="white") +
facet_grid(~group_1_short, scales = "free", space = "free")
tukey_heatmap_complete <- rbind(tukey_test_heatmap, tukey_test_heatmap_filled) %>%
mutate(group_1_short = gsub("\\_.*", "", group1)) %>%
mutate(group_2_short = gsub("\\_.*", "", group2)) %>%
mutate(p.adj_altered = case_when(
p.adj<0.05 ~ p.adj,
TRUE ~ NA))
tukey_heatmap_complete <- rbind(tukey_test_heatmap, tukey_test_heatmap_filled) %>%
mutate(group_1_short = gsub("\\_.*", "", group1)) %>%
mutate(group_2_short = gsub("\\_.*", "", group2)) %>%
mutate(p.adj_altered = case_when(
p.adj<0.05 ~ p.adj,
p.adj>=0.05 ~ 1))
ggplot(tukey_heatmap_complete, aes(x=group1, group2, fill= p.adj)) +
geom_tile(aes(fill=p.adj_altered)) +
labs(title=paste0(x," Harmonized Diagnosis Tukey Test for TPM"),x="Harmonized Diagnosis", y = "Harmonized Diagnosis") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_gradient(low="red", high="white") +
facet_grid(~group_1_short, scales = "free", space = "free")
tukey_heatmap_complete <- rbind(tukey_test_heatmap, tukey_test_heatmap_filled) %>%
mutate(group_1_short = gsub("\\_.*", "", group1)) %>%
mutate(group_2_short = gsub("\\_.*", "", group2)) %>%
mutate(p.adj_altered = case_when(
p.adj<0.05 ~ p.adj,
p.adj>=0.05 ~ 0.05))
ggplot(tukey_heatmap_complete, aes(x=group1, group2, fill= p.adj)) +
geom_tile(aes(fill=p.adj)) +
labs(title=paste0(x," Harmonized Diagnosis Tukey Test for TPM"),x="Harmonized Diagnosis", y = "Harmonized Diagnosis") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_gradient(low="red", high="white") +
facet_grid(~group_1_short, scales = "free", space = "free")
tukey_heatmap_complete <- rbind(tukey_test_heatmap, tukey_test_heatmap_filled) %>%
mutate(group_1_short = gsub("\\_.*", "", group1)) %>%
mutate(group_2_short = gsub("\\_.*", "", group2)) %>%
mutate(p.adj_altered = case_when(
p.adj<0.05 ~ p.adj,
p.adj>=0.05 ~ NA))
breaggplot(tukey_heatmap_complete, aes(x=group1, group2, fill= p.adj)) +
geom_tile(aes(fill=p.adj)) +
labs(title=paste0(x," Harmonized Diagnosis Tukey Test for TPM"),x="Harmonized Diagnosis", y = "Harmonized Diagnosis") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_gradientn(breaks = c(0, 0.05), low="red", high="white") +
facet_grid(~group_1_short, scales = "free", space = "free")
ggplot(tukey_heatmap_complete, aes(x=group1, group2, fill= p.adj)) +
geom_tile(aes(fill=p.adj)) +
labs(title=paste0(x," Harmonized Diagnosis Tukey Test for TPM"),x="Harmonized Diagnosis", y = "Harmonized Diagnosis") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_gradientn(breaks = c(0, 0.05), low="red", high="white") +
facet_grid(~group_1_short, scales = "free", space = "free")
ggplot(tukey_heatmap_complete, aes(x=group1, group2, fill= p.adj)) +
geom_tile(aes(fill=p.adj)) +
labs(title=paste0(x," Harmonized Diagnosis Tukey Test for TPM"),x="Harmonized Diagnosis", y = "Harmonized Diagnosis") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_gradientn(breaks = c(0, 0.05), colors = c("red", "white")) +
facet_grid(~group_1_short, scales = "free", space = "free")
ggplot(tukey_heatmap_complete, aes(x=group1, group2, fill= p.adj)) +
geom_tile(aes(fill=p.adj)) +
labs(title=paste0(x," Harmonized Diagnosis Tukey Test for TPM"),x="Harmonized Diagnosis", y = "Harmonized Diagnosis") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_gradientn(breaks = c(0, 0.05), colors = c("white", "red")) +
facet_grid(~group_1_short, scales = "free", space = "free")
ggplot(tukey_heatmap_complete, aes(x=group1, group2, fill= p.adj)) +
geom_tile(aes(fill=p.adj)) +
labs(title=paste0(x," Harmonized Diagnosis Tukey Test for TPM"),x="Harmonized Diagnosis", y = "Harmonized Diagnosis") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_gradientn(breaks = c(0, 0.01, 0.05), colors = c("red", "orange","white")) +
facet_grid(~group_1_short, scales = "free", space = "free")
tukey_heatmap_complete <- rbind(tukey_test_heatmap, tukey_test_heatmap_filled) %>%
mutate(group_1_short = gsub("\\_.*", "", group1)) %>%
mutate(group_2_short = gsub("\\_.*", "", group2)) %>%
mutate(p.adj_altered = case_when(
p.adj < 0.05 ~ p.adj,
p.adj >=0.05 ~ 0.05
))
ggplot(tukey_heatmap_complete, aes(x=group1, group2, fill= p.adj)) +
geom_tile(aes(fill=p.adj)) +
labs(title=paste0(x," Harmonized Diagnosis Tukey Test for TPM"),x="Harmonized Diagnosis", y = "Harmonized Diagnosis") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_gradient(low = "red", high = "white") +
facet_grid(~group_1_short, scales = "free", space = "free")
ggplot(tukey_heatmap_complete, aes(x=group1, group2, fill= p.adj_altered)) +
geom_tile(aes(fill=p.adj_altered)) +
labs(title=paste0(x," Harmonized Diagnosis Tukey Test for TPM"),x="Harmonized Diagnosis", y = "Harmonized Diagnosis") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_gradient(low = "red", high = "white") +
facet_grid(~group_1_short, scales = "free", space = "free")
ggplot(tukey_heatmap_complete, aes(x=group1, group2, fill= p.adj)) +
geom_tile(aes(fill=p.adj)) +
labs(title=paste0(x," Harmonized Diagnosis Tukey Test for TPM"),x="Harmonized Diagnosis", y = "Harmonized Diagnosis") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_gradient2(limits = c(0, 0.05), low = "red", high = "white") +
facet_grid(~group_1_short, scales = "free", space = "free")
tukey_heatmap_complete <- rbind(tukey_test_heatmap, tukey_test_heatmap_filled) %>%
mutate(group_1_short = gsub("\\_.*", "", group1)) %>%
mutate(group_2_short = gsub("\\_.*", "", group2)) %>%
# treat all p.adj>=.05 as non significant
mutate(p.adj = case_when(
p.adj < 0.05 ~ p.adj,
p.adj >=0.05 ~ 0.05
))
ggplot(tukey_heatmap_complete, aes(x=group1, group2, fill= p.adj)) +
geom_tile(aes(fill=p.adj)) +
labs(title=paste0(x," Harmonized Diagnosis Tukey Test for TPM"),x="Harmonized Diagnosis", y = "Harmonized Diagnosis") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_gradient(low = "red", high = "white") +
facet_grid(~group_1_short, scales = "free", space = "free")
ggplot(tukey_heatmap_complete, aes(x=group1, group2, fill= p.adj)) +
geom_tile(aes(fill=p.adj)) +
labs(title=paste0(x," Harmonized Diagnosis Tukey Test for TPM"),x="Harmonized Diagnosis", y = "Harmonized Diagnosis") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_gradient(low = "red", high = "white") +
facet_grid(group_2_short~group_1_short, scales = "free", space = "free")
1
ggplot(tukey_heatmap_complete, aes(x=group1, group2, fill= p.adj)) +
geom_tile(aes(fill=p.adj)) +
labs(title=paste0(x," Harmonized Diagnosis Tukey Test for TPM"),x="Harmonized Diagnosis", y = "Harmonized Diagnosis") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_gradient(low = "red", high = "white") +
facet_grid(group_1_short~group_1_short, scales = "free", space = "free")
ggplot(tukey_heatmap_complete, aes(x=group1, group2, fill= p.adj)) +
geom_tile(aes(fill=p.adj)) +
labs(title=paste0(x," Harmonized Diagnosis Tukey Test for TPM"),x="Harmonized Diagnosis", y = "Harmonized Diagnosis") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_gradient(low = "red", high = "white") +
facet_grid(group_1_short~group_2_short, scales = "free", space = "free")
ggplot(tukey_heatmap_complete, aes(x=group1, group2, fill= p.adj)) +
geom_tile(aes(fill=p.adj)) +
labs(title=paste0(x," Harmonized Diagnosis Tukey Test for TPM"),x="Harmonized Diagnosis", y = "Harmonized Diagnosis") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_gradient(low = "red", high = "white") +
facet_grid(group_2_short~group_1_short, scales = "free", space = "free")
ggplot(tukey_heatmap_complete, aes(x=group1, group2, fill= p.adj)) +
geom_tile(aes(fill=p.adj)) +
labs(title=paste0(x," Harmonized Diagnosis Tukey Test for TPM"),x="Harmonized Diagnosis", y = "Harmonized Diagnosis") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_fill_gradient(low = "red", high = "white") +
facet_grid(.~group_1_short, scales = "free", space = "free")
