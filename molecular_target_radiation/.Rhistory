# generate annotated expression matrix for the modeling below
median_exp <- median(combined[[y]]) %>% as.numeric()
# assign high or low expression to samples
combined_annotated <- combined %>%
rename("gene_of_interest" = y) %>%
mutate(expression_level = case_when(
gene_of_interest>median_exp ~"High",
gene_of_interest<=median_exp ~ "low"
))
########################################## survival analysis PFS
# generate the log-rank model
fit_gene_pfs <- survival::survdiff(
as.formula("survival::Surv(PFS_days, PFS_status) ~ expression_level"),
data = combined_annotated
)
# get the p.values and all statistics for the model
fit_gene_pfs$p.value <- round(pchisq(fit_gene_pfs$chisq, df = 1, lower = FALSE), digits=3)
fit_gene_pfs_df <- as.data.frame(fit_gene_pfs[c("n", "obs", "exp", "chisq", "p.value")])
fit_gene_pfs_df <- fit_gene_pfs_df %>% mutate(cancer_group = x,
gene_interest = y,
model = "PFS")
combined_df <- rbind(fit_gene_df, fit_gene_pfs_df)
# generate the kaplan-meier model
kap_fit_gene <- survival::survfit(
as.formula("survival::Surv(PFS_days, PFS_status) ~ expression_level"),
data = combined_annotated
)
# generate and save the survival plot
surv_plot <- survminer::ggsurvplot(kap_fit_gene,
pval = round(fit_gene_pfs$p.value,digits=3), # use the computed pval from log rank analyses
data = combined_annotated,
risk.table = TRUE,
xlim = c(0, 2000),
break.time.by = 500,
ggtheme = theme_minimal(),
risk.table.y.text.col = TRUE,
risk.table.y.text = FALSE
)
# Make this plot a combined plot
surv_plot <- cowplot::plot_grid(surv_plot[[1]], surv_plot[[2]], nrow = 2,
rel_heights = c(2.5, 1))
km_survival_plot_sub_dir <- file.path(km_survival_plots_dir, "PFS",y)
cowplot::save_plot(filename = file.path(km_survival_plot_sub_dir,"kaplan_meier_survival.png"), plot = surv_plot)
x <- "HGG"
# match the long name to the short name
long_name <- short_long_match %>% filter(short_name == x) %>%
pull(long_name)
# make directory for results and plots
km_survival_plots_dir <- file.path(root_dir, "molecular_target_radiation", "plots",x, "KM_survival")
# filter to the cohort of interest
cohort_df <- histology_df %>% dplyr::filter(cancer_group == long_name) %>%
dplyr::select(Kids_First_Biospecimen_ID, os_status_level, OS_days, PFS_status,PFS_days)
# get biospecimen ID's for samples
cohort_bsid <- cohort_df %>% pull(Kids_First_Biospecimen_ID) %>% unique()
# subset to gene and sample of interest
expression_of_interest <- expression_data %>% dplyr::select(all_of(cohort_bsid)) %>%
tibble::rownames_to_column("GeneSymbol") %>%
dplyr::filter(GeneSymbol %in% gene_list) %>%
tibble::column_to_rownames("GeneSymbol") %>%
t() %>% as.data.frame() %>%
tibble::rownames_to_column("Kids_First_Biospecimen_ID")
#annotate relevant clinical information to the expression data frame
combined <- expression_of_interest %>%
dplyr::left_join(cohort_df)
gene_list<- c("FOLH1", "SLC7A5")
#for genes of interest, generate grouping based on that gene
lapply(gene_list,function(y){
# generate annotated expression matrix for the modeling below
median_exp <- median(combined[[y]]) %>% as.numeric()
# assign high or low expression to samples
combined_annotated <- combined %>%
rename("gene_of_interest" = y) %>%
mutate(expression_level = case_when(
gene_of_interest>median_exp ~"High",
gene_of_interest<=median_exp ~ "low"
))
########################################## survival analysis OS
# generate the log-rank model
fit_gene <- survival::survdiff(
as.formula("survival::Surv(OS_days, os_status_level) ~ expression_level"),
data = combined_annotated
)
# get the p.values and all statistics for the model
fit_gene$p.value <- round(pchisq(fit_gene$chisq, df = 1, lower = FALSE), digits=3)
fit_gene_df <- as.data.frame(fit_gene[c("n", "obs", "exp", "chisq", "p.value")])
fit_gene_df <- fit_gene_df %>% mutate(cancer_group = x,
gene_interest = y,
model = "OS")
# generate the kaplan-meier model
kap_fit_gene <- survival::survfit(
as.formula("survival::Surv(OS_days, os_status_level) ~ expression_level"),
data = combined_annotated
)
# generate and save the survival plot
surv_plot <- survminer::ggsurvplot(kap_fit_gene,
pval = round(fit_gene$p.value, digits=3), # use the computed pval from log rank analyses
data = combined_annotated,
risk.table = TRUE,
xlim = c(0, 2000),
break.time.by = 500,
ggtheme = theme_minimal(),
risk.table.y.text.col = TRUE,
risk.table.y.text = FALSE
)
# Make this plot a combined plot
surv_plot <- cowplot::plot_grid(surv_plot[[1]], surv_plot[[2]], nrow = 2,
rel_heights = c(2.5, 1))
km_survival_plot_sub_dir <- file.path(km_survival_plots_dir, "OS",y)
if (!dir.exists(km_survival_plot_sub_dir )) {
dir.create(km_survival_plot_sub_dir , recursive = TRUE)
}
cowplot::save_plot(filename = file.path(km_survival_plot_sub_dir,"kaplan_meier_survival.png"), plot = surv_plot)
########################################## survival analysis PFS
# generate the log-rank model
fit_gene_pfs <- survival::survdiff(
as.formula("survival::Surv(PFS_days, PFS_status) ~ expression_level"),
data = combined_annotated
)
# get the p.values and all statistics for the model
fit_gene_pfs$p.value <- round(pchisq(fit_gene_pfs$chisq, df = 1, lower = FALSE), digits=3)
fit_gene_pfs_df <- as.data.frame(fit_gene_pfs[c("n", "obs", "exp", "chisq", "p.value")])
fit_gene_pfs_df <- fit_gene_pfs_df %>% mutate(cancer_group = x,
gene_interest = y,
model = "PFS")
combined_df <- rbind(fit_gene_df, fit_gene_pfs_df)
return(combined_df)
# generate the kaplan-meier model
kap_fit_gene <- survival::survfit(
as.formula("survival::Surv(PFS_days, PFS_status) ~ expression_level"),
data = combined_annotated
)
# generate and save the survival plot
surv_plot <- survminer::ggsurvplot(kap_fit_gene,
pval = round(fit_gene_pfs$p.value,digits=3), # use the computed pval from log rank analyses
data = combined_annotated,
risk.table = TRUE,
xlim = c(0, 2000),
break.time.by = 500,
ggtheme = theme_minimal(),
risk.table.y.text.col = TRUE,
risk.table.y.text = FALSE
)
# Make this plot a combined plot
surv_plot <- cowplot::plot_grid(surv_plot[[1]], surv_plot[[2]], nrow = 2,
rel_heights = c(2.5, 1))
km_survival_plot_sub_dir <- file.path(km_survival_plots_dir, "PFS",y)
if (!dir.exists(km_survival_plot_sub_dir )) {
dir.create(km_survival_plot_sub_dir , recursive = TRUE)
}
cowplot::save_plot(filename = file.path(km_survival_plot_sub_dir,"kaplan_meier_survival.png"), plot = surv_plot)
})
# generate annotated expression matrix for the modeling below
median_exp <- median(combined[[y]]) %>% as.numeric()
# assign high or low expression to samples
combined_annotated <- combined %>%
rename("gene_of_interest" = y) %>%
mutate(expression_level = case_when(
gene_of_interest>median_exp ~"High",
gene_of_interest<=median_exp ~ "low"
))
########################################## survival analysis OS
# generate the log-rank model
fit_gene <- survival::survdiff(
as.formula("survival::Surv(OS_days, os_status_level) ~ expression_level"),
data = combined_annotated
)
# get the p.values and all statistics for the model
fit_gene$p.value <- round(pchisq(fit_gene$chisq, df = 1, lower = FALSE), digits=3)
fit_gene_df <- as.data.frame(fit_gene[c("n", "obs", "exp", "chisq", "p.value")])
########################################## survival analysis PFS
# generate the log-rank model
fit_gene_pfs <- survival::survdiff(
as.formula("survival::Surv(PFS_days, PFS_status) ~ expression_level"),
data = combined_annotated
)
# get the p.values and all statistics for the model
fit_gene_pfs$p.value <- round(pchisq(fit_gene_pfs$chisq, df = 1, lower = FALSE), digits=3)
fit_gene_pfs_df <- as.data.frame(fit_gene_pfs[c("n", "obs", "exp", "chisq", "p.value")])
fit_gene_pfs_df <- fit_gene_pfs_df %>% mutate(cancer_group = x,
gene_interest = y,
model = "PFS")
# generate the kaplan-meier model
kap_fit_gene <- survival::survfit(
as.formula("survival::Surv(PFS_days, PFS_status) ~ expression_level"),
data = combined_annotated
)
# generate and save the survival plot
surv_plot <- survminer::ggsurvplot(kap_fit_gene,
pval = round(fit_gene_pfs$p.value,digits=3), # use the computed pval from log rank analyses
data = combined_annotated,
risk.table = TRUE,
xlim = c(0, 2000),
break.time.by = 500,
ggtheme = theme_minimal(),
risk.table.y.text.col = TRUE,
risk.table.y.text = FALSE
)
# Make this plot a combined plot
surv_plot <- cowplot::plot_grid(surv_plot[[1]], surv_plot[[2]], nrow = 2,
rel_heights = c(2.5, 1))
km_survival_plot_sub_dir <- file.path(km_survival_plots_dir, "PFS",y)
if (!dir.exists(km_survival_plot_sub_dir )) {
dir.create(km_survival_plot_sub_dir , recursive = TRUE)
}
cowplot::save_plot(filename = file.path(km_survival_plot_sub_dir,"kaplan_meier_survival.png"), plot = surv_plot)
View(histology_pbta)
histology_pbta$short_histology
histology_pbta$short_histology %>% unique()
histology_pbta %>% filter(short_histology == "HGAT") %>% filter(sample_type == "Tumor") %>% filter(experimental_strategy == "RNA-Seq")
histology_pbta %>% filter(short_histology == "HGAT") %>% filter(sample_type == "Tumor") %>% filter(experimental_strategy == "RNA-Seq") %>% filter(tumor_descriptor == "Initial CNS Tumor")
histology_pbta %>% filter(short_histology == "HGAT") %>% filter(sample_type == "Tumor") %>% filter(experimental_strategy == "RNA-Seq") %>% filter(tumor_descriptor == "Initial CNS Tumor") %>% select(short_histology, harmonized_diagnosis)
histology_pbta %>% filter(short_histology == "HGAT") %>% filter(sample_type == "Tumor") %>% filter(experimental_strategy == "RNA-Seq") %>% filter(tumor_descriptor == "Initial CNS Tumor") %>% select(short_histology, harmonized_diagnosis) %>% table()
histology_pbta %>% filter(short_histology == "LGAT") %>% filter(sample_type == "Tumor") %>% filter(experimental_strategy == "RNA-Seq") %>% filter(tumor_descriptor == "Initial CNS Tumor") %>% select(short_histology, harmonized_diagnosis) %>% table()
View(histology)
histology %>% select(short_histology) %>% unique()
histology %>% select(broad_histology) %>% unique()
histology %>% select(cancer_group) %>% unique()
see <- histology %>% select(cancer_group) %>% unique()
View(see)
View(histology_df)
View(histology)
View(histology_pbta)
cohort_name <- histology_pbta   %>% filter(short_histology %in% c("HGG", "LGG", "Medulloblastoma")) %>% pull(Kids_First_Biospecimen_ID)
histology %>% filter(Kids_First_Biospecimen_ID %in% cohort_name) %>% pull(cancer_group) %>% unique()
cohort_name <- histology_pbta   %>% filter(short_histology %in% c("HGAT", "LGAT", "Medulloblastoma")) %>% pull(Kids_First_Biospecimen_ID)
histology %>% filter(Kids_First_Biospecimen_ID %in% cohort_name) %>% pull(cancer_group) %>% unique()
cohort_name <- histology_pbta   %>% filter(short_histology %in% c("HGAT") %>% pull(Kids_First_Biospecimen_ID)
cohort_name <- histology_pbta   %>% filter(short_histology %in% c("HGAT")) %>% pull(Kids_First_Biospecimen_ID)
histology %>% filter(Kids_First_Biospecimen_ID %in% cohort_name) %>% pull(cancer_group) %>% unique()
cohort_name %in% histology$Kids_First_Biospecimen_ID
cohort_name <- histology_pbta %>% filter(short_histology == "HGAT") %>% filter(sample_type == "Tumor") %>% filter(experimental_strategy == "RNA-Seq") %>% filter(tumor_descriptor == "Initial CNS Tumor") %>% pull(Kids_First_Biospecimen_ID) %>% unique()
ohort_name %in% histology$Kids_First_Biospecimen_ID
cohort_name %in% histology$Kids_First_Biospecimen_ID
View(histology_pbta)
histology_pbta$PFS_days
cohort_name <- histology_pbta %>% filter(short_histology == "HGAT") %>% filter(sample_type == "Tumor") %>% filter(experimental_strategy == "RNA-Seq") %>% filter(tumor_descriptor == "Initial CNS Tumor") %>% pull(Kids_First_Biospecimen_ID) %>% unique()
cohort_name %in% histology$Kids_First_Biospecimen_ID
histology_pnoc003 <- readr::read_tsv("~/d3b-pnoc003-HGG-DMG-omics/data/pbta-histologies-base-adapt.tsv")
histology_pnoc003 <- readr::read_tsv("~/d3b-pnoc003-HGG-DMG-omics/data/pbta-histologies.tsv")
View(histology_pnoc003)
histology_df <- histology
#### Calculate PFS status based on the PFS days and OS days -----------------------------------
histology_df$PFS_days <- as.numeric(histology_df$PFS_days)
histology_df <- histology_df %>%
dplyr::mutate(PFS_status = if_else(PFS_days < OS_days, 1, 0)) %>%
dplyr::filter(tumor_descriptor == "Initial CNS Tumor") %>%
dplyr::filter(experimental_strategy=="RNA-Seq") %>%
dplyr::filter(!is.na(OS_status)) %>%
dplyr::mutate(os_status_level = case_when(
OS_status == "LIVING" ~ 0,
OS_status == "DECEASED" ~ 1
))
long_name <- short_long_match %>% filter(short_name == "HGG") %>%
pull(long_name)
short_long_match <- readr::read_tsv("../data/short_long_match.tsv")
# match the long name to the short name
long_name <- short_long_match %>% filter(short_name == x) %>%
pull(long_name)
x <- "HGG"
# filter to the cohort of interest
cohort_df <- histology_df %>% dplyr::filter(cancer_group == long_name) %>%
dplyr::select(Kids_First_Biospecimen_ID, os_status_level, OS_days, PFS_status,PFS_days)
# define directory
cox_survival_plots_dir <- file.path(root_dir, "molecular_target_radiation", "plots",x, "CoxPH_survival")
if (!dir.exists(cox_survival_plots_dir )) {
dir.create(cox_survival_plots_dir , recursive = TRUE)
}
# match the long name to the short name
long_name <- short_long_match %>% filter(short_name == x) %>%
pull(long_name)
# filter to the cohort of interest
cohort_df <- histology_df %>% dplyr::filter(cancer_group %in% long_name) %>%
dplyr::select(Kids_First_Biospecimen_ID, os_status_level, OS_days, PFS_status,PFS_days, CNS_region, harmonized_diagnosis)
# get biospecimen ID's for samples
cohort_bsid <- cohort_df %>% pull(Kids_First_Biospecimen_ID) %>% unique()
# subset to gene and sample of interest
expression_of_interest <- expression_data %>% dplyr::select(all_of(cohort_bsid)) %>%
tibble::rownames_to_column("GeneSymbol") %>%
dplyr::filter(GeneSymbol ==y) %>%
tibble::column_to_rownames("GeneSymbol") %>%
t() %>% as.data.frame() %>%
tibble::rownames_to_column("Kids_First_Biospecimen_ID")
#annotate relevant clinical information to the expression data frame
combined_annotated <- expression_of_interest %>% dplyr::left_join(cohort_df)
########################################## survival analysis OS
# separate
set.seed(236)
# change the columns to desired type
combined_annotated$harmonized_diagnosis <- as.factor(combined_annotated$harmonized_diagnosis)
combined_annotated$CNS_region <- as.factor(combined_annotated$CNS_region)
trainIndex <- createDataPartition(combined_annotated$os_status_level, p = 0.6,
list = FALSE,
times = 1)
library(caret)
trainIndex <- createDataPartition(combined_annotated$os_status_level, p = 0.6,
list = FALSE,
times = 1)
data_train <- combined_annotated[trainIndex, ]
data_test <- combined_annotated[-trainIndex, ]
data_test
nrow(data_test)
# Define models
model_gene <- as.formula(paste0("survival::Surv(OS_days, os_status_level) ~ harmonized_diagnosis + CNS_region + ",y))
coxph_train_gene <- survival::coxph(model_gene,
data = data_train)
# generate the stats summary
coxph_train_gene_sum_os <- as.data.frame(summary(coxph_train_gene)$coefficients, keep.rownames = T) %>%
tibble::rownames_to_column() %>%
mutate(cancer_group =x,
gene_list = y,
survival = "OS")
# define between risk groups
train_risk_gene <- predict(coxph_train_gene, type = "risk")
med_risk_gene<- median(train_risk_gene)
# assign the groups between rish groups
test_risk_gene <- predict(coxph_train_gene, newdata = data_test, type = "risk") %>%
as.data.frame() %>% cbind(data_test) %>%
dplyr::rename("RiskScore" = ".") %>%
dplyr::mutate(RiskGroup = case_when(
RiskScore > med_risk_gene ~ "High",
RiskScore <= med_risk_gene ~ "Low"
))
# make risk groups into factors
test_risk_gene$RiskGroup <- as.factor(test_risk_gene$RiskGroup)
# calculate stats for risk group per gene
coxph_riskgroup_gene <- survival::coxph(formula = Surv(OS_days, os_status_level) ~  RiskGroup,
data = test_risk_gene)
coxph_riskgroup_gene_sum <- as.data.frame(summary(coxph_riskgroup_gene)$coefficients) %>%
tibble::rownames_to_column()
# calculate stats for risk score per gene
coxph_riskscore_gene <- survival::coxph(formula = Surv(OS_days, os_status_level) ~  RiskScore,
data = test_risk_gene)
coxph_riskscore_gene_sum <- as.data.frame(summary(coxph_riskscore_gene)$coefficients) %>%
tibble::rownames_to_column()
combined_coxph_sum_os <- rbind(coxph_riskgroup_gene_sum, coxph_riskscore_gene_sum) %>%
mutate(cancer_group =x,
gene_list = y,
survival = "OS")
combined_coxph_sum_os
########################################## plot generation for OS survival
fit_gene <- survfit(Surv(OS_days, os_status_level) ~ RiskGroup, data = test_risk_gene)
plot_coxph_riskgroup_gene <- survminer::ggsurvplot(fit_gene,
data=test_risk_gene,
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF"))
# Make this plot a combined plot
surv_plot_gene <- cowplot::plot_grid(plot_coxph_riskgroup_gene[[1]],
plot_coxph_riskgroup_gene[[2]],
nrow = 2,
rel_heights = c(2.5, 1))
cox_survival_plots_os_dir <- file.path(cox_survival_plots_dir, "OS",y)
if (!dir.exists(cox_survival_plots_os_dir )) {
dir.create(cox_survival_plots_os_dir , recursive = TRUE)
}
# Save the plot
cowplot::save_plot(filename = file.path(cox_survival_plots_os_dir, "coxph_riskgroup_survival.png"), plot = surv_plot_gene)
combined_annotated <- combined_annotated %>%
dplyr::filter(!is.na(PFS_status))
# separate
set.seed(236)
trainIndex <- createDataPartition(combined_annotated$PFS_status, p = 0.6,
list = FALSE,
times = 1)
data_train <- combined_annotated[trainIndex, ]
data_test <- combined_annotated[-trainIndex, ]
nrow(data_test)
model_gene <- as.formula(paste0("survival::Surv(PFS_days, PFS_status) ~ harmonized_diagnosis + CNS_region + ",y))
coxph_train_gene <- survival::coxph(model_gene,
data = data_train)
# generate the stats summary
coxph_train_gene_sum_pfs <- as.data.frame(summary(coxph_train_gene)$coefficients, keep.rownames = T) %>%
tibble::rownames_to_column() %>%
mutate(cancer_group =x,
gene_list = y,
survival = "PFS")
# define between risk groups
train_risk_gene <- predict(coxph_train_gene, type = "risk")
med_risk_gene<- median(train_risk_gene)
# assign the groups between rish groups
test_risk_gene <- predict(coxph_train_gene, newdata = data_test, type = "risk") %>%
as.data.frame() %>% cbind(data_test) %>%
dplyr::rename("RiskScore" = ".") %>%
dplyr::mutate(RiskGroup = case_when(
RiskScore > med_risk_gene ~ "High",
RiskScore <= med_risk_gene ~ "Low"
))
# make risk groups into factors
test_risk_gene$RiskGroup <- as.factor(test_risk_gene$RiskGroup)
# make risk groups into factors
test_risk_gene$RiskGroup <- as.factor(test_risk_gene$RiskGroup)
# calculate stats for risk group per gene
coxph_riskgroup_gene <- survival::coxph(formula = Surv(PFS_days, PFS_status) ~  RiskGroup,
data = test_risk_gene)
coxph_riskgroup_gene_sum <- as.data.frame(summary(coxph_riskgroup_gene)$coefficients) %>%
tibble::rownames_to_column()
# calculate stats for risk score per gene
coxph_riskscore_gene <- survival::coxph(formula = Surv(PFS_days, PFS_status) ~  RiskScore,
data = test_risk_gene)
coxph_riskscore_gene_sum <- as.data.frame(summary(coxph_riskscore_gene)$coefficients) %>%
tibble::rownames_to_column()
combined_coxph_sum_pfs <- rbind(coxph_riskgroup_gene_sum, coxph_riskscore_gene_sum) %>%
mutate(cancer_group =x,
gene_list = y,
survival = "PFS")
combined_coxph_sum <- rbind(combined_coxph_sum_os, combined_coxph_sum_pfs)
test_stats <- rbind(test_stats, combined_coxph_sum)
combined_coxph_train <- rbind(coxph_train_gene_sum_os, coxph_train_gene_sum_pfs)
train_stats <- rbind(train_stats, combined_coxph_train)
########################################## plot generation for PFS survival
fit_gene_pfs <- survfit(Surv(PFS_days, PFS_status) ~ RiskGroup, data = test_risk_gene)
plot_coxph_riskgroup_gene_pfs <- survminer::ggsurvplot(fit_gene_pfs,
data=test_risk_gene,
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF"))
# Make this plot a combined plot
surv_plot_gene_pfs <- cowplot::plot_grid(plot_coxph_riskgroup_gene_pfs[[1]],
plot_coxph_riskgroup_gene_pfs[[2]],
nrow = 2,
rel_heights = c(2.5, 1))
cox_survival_plots_pfs_dir <- file.path(cox_survival_plots_dir, "PFS",y)
if (!dir.exists(cox_survival_plots_pfs_dir )) {
dir.create(cox_survival_plots_pfs_dir , recursive = TRUE)
}
# Save the plot
cowplot::save_plot(filename = file.path(cox_survival_plots_pfs_dir, "coxph_riskgroup_survival.png"), plot = surv_plot_gene_pfs)
x <- "SLC7A5"
x <- "HGG"
y <- "SLC7A5"
combined_annotated <- combined_annotated %>%
dplyr::filter(!is.na(PFS_status))
# separate
set.seed(236)
trainIndex <- createDataPartition(combined_annotated$PFS_status, p = 0.6,
list = FALSE,
times = 1)
data_train <- combined_annotated[trainIndex, ]
data_test <- combined_annotated[-trainIndex, ]
model_gene <- as.formula(paste0("survival::Surv(PFS_days, PFS_status) ~ harmonized_diagnosis + CNS_region + ",y))
coxph_train_gene <- survival::coxph(model_gene,
data = data_train)
# generate the stats summary
coxph_train_gene_sum_pfs <- as.data.frame(summary(coxph_train_gene)$coefficients, keep.rownames = T) %>%
tibble::rownames_to_column() %>%
mutate(cancer_group =x,
gene_list = y,
survival = "PFS")
# define between risk groups
train_risk_gene <- predict(coxph_train_gene, type = "risk")
med_risk_gene<- median(train_risk_gene)
# assign the groups between rish groups
test_risk_gene <- predict(coxph_train_gene, newdata = data_test, type = "risk") %>%
as.data.frame() %>% cbind(data_test) %>%
dplyr::rename("RiskScore" = ".") %>%
dplyr::mutate(RiskGroup = case_when(
RiskScore > med_risk_gene ~ "High",
RiskScore <= med_risk_gene ~ "Low"
))
# make risk groups into factors
test_risk_gene$RiskGroup <- as.factor(test_risk_gene$RiskGroup)
# calculate stats for risk group per gene
coxph_riskgroup_gene <- survival::coxph(formula = Surv(PFS_days, PFS_status) ~  RiskGroup,
data = test_risk_gene)
coxph_riskgroup_gene_sum <- as.data.frame(summary(coxph_riskgroup_gene)$coefficients) %>%
tibble::rownames_to_column()
# calculate stats for risk score per gene
coxph_riskscore_gene <- survival::coxph(formula = Surv(PFS_days, PFS_status) ~  RiskScore,
data = test_risk_gene)
coxph_riskscore_gene_sum <- as.data.frame(summary(coxph_riskscore_gene)$coefficients) %>%
tibble::rownames_to_column()
combined_coxph_sum_pfs <- rbind(coxph_riskgroup_gene_sum, coxph_riskscore_gene_sum) %>%
mutate(cancer_group =x,
gene_list = y,
survival = "PFS")
combined_coxph_sum <- rbind(combined_coxph_sum_os, combined_coxph_sum_pfs)
test_stats <- rbind(test_stats, combined_coxph_sum)
combined_coxph_train <- rbind(coxph_train_gene_sum_os, coxph_train_gene_sum_pfs)
train_stats <- rbind(train_stats, combined_coxph_train)
########################################## plot generation for PFS survival
fit_gene_pfs <- survfit(Surv(PFS_days, PFS_status) ~ RiskGroup, data = test_risk_gene)
plot_coxph_riskgroup_gene_pfs <- survminer::ggsurvplot(fit_gene_pfs,
data=test_risk_gene,
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF"))
# Make this plot a combined plot
surv_plot_gene_pfs <- cowplot::plot_grid(plot_coxph_riskgroup_gene_pfs[[1]],
plot_coxph_riskgroup_gene_pfs[[2]],
nrow = 2,
rel_heights = c(2.5, 1))
cox_survival_plots_pfs_dir <- file.path(cox_survival_plots_dir, "PFS",y)
if (!dir.exists(cox_survival_plots_pfs_dir )) {
dir.create(cox_survival_plots_pfs_dir , recursive = TRUE)
}
# Save the plot
cowplot::save_plot(filename = file.path(cox_survival_plots_pfs_dir, "coxph_riskgroup_survival.png"), plot = surv_plot_gene_pfs)
