# calculate mean
nb_means <-rowMeans(filtered_log_mb_coding_pval, na.rm = TRUE)
# calculate sd
nb_sd <- apply(filtered_log_mb_coding_pval, 1, sd, na.rm = TRUE)
# subtract mean
filtered_log_mb_coding_pval_minus_mean <- sweep(filtered_log_mb_coding_pval, 1, nb_means, FUN = "-")
# divide by SD remove NAs and Inf values from zscore for genes with 0 in normData
filtered_log_mb_coding_pval_zscored <- sweep(filtered_log_mb_coding_pval_minus_mean, 1,nb_sd, FUN = "/") %>%
na_if(Inf) %>% na.omit()
View(filtered_log_mb_coding_pval_zscored)
View(cluster_anno)
# arrange the genes based on gene cluster by COSEQ
cluster_anno <- cluste_anno %>%
tibble::rownames_to_column("gene_symbol")
# arrange the genes based on gene cluster by COSEQ
cluster_anno <- cluster_anno %>%
tibble::rownames_to_column("gene_symbol")
View(cluster_anno)
View(cohort_df)
View(cluster_nb)
View(cluster_anno)
# arrange the genes based on gene cluster by COSEQ
cluster_anno <- cluster_anno %>%
tibble::rownames_to_column("gene_symbol") %>%
rename(cluster_by_coseq = cluster)
# arrange the genes based on gene cluster by COSEQ
cluster_anno <- cluster_anno %>%
# tibble::rownames_to_column("gene_symbol") %>%
rename(cluster_by_coseq = cluster)
View(cluster_anno)
cluster_anno <- cluster_anno %>%
dplyr::rename(cluster_by_coseq = cluster)
View(cluster_anno)
filtered_log_mb_coding_pval_zscored <- filtered_log_mb_coding_pval_zscored %>%
tibble::rownames_to_column("gene_symbol") %>%
left_join(cluster_anno) %>%
arrange(cluster_by_coseq) %>%
dplyr::select(-cluster_by_coseq) %>%
tibble::column_to_rownames("gene_symbol")
View(filtered_log_mb_coding_pval_zscored)
cluster_anno <- cluster_anno %>%
tibble::column_to_rownames("gene_symbol")
# arrange the matrix based on cluster
filtered_log_mb_coding_pval_zscored_anno <- filtered_log_mb_coding_pval_zscored %>%
t() %>%
as.data.frame() %>%
tibble::rownames_to_column("Kids_First_Biospecimen_ID") %>%
left_join(combined_nb) %>%
arrange(molecular_subtype) %>%
arrange(cluster_assigned_nb) %>%
select(-molecular_subtype) %>%
select(-cluster_assigned_nb) %>%
tibble::column_to_rownames("Kids_First_Biospecimen_ID")
# arrange the matrix based on cluster
filtered_log_mb_coding_pval_zscored_anno <- filtered_log_mb_coding_pval_zscored %>%
t() %>%
as.data.frame() %>%
tibble::rownames_to_column("Kids_First_Biospecimen_ID") %>%
dplyr::left_join(combined_nb) %>%
arrange(molecular_subtype) %>%
arrange(cluster_assigned_nb) %>%
dplyr::select(-molecular_subtype) %>%
dplyr::select(-cluster_assigned_nb) %>%
tibble::column_to_rownames("Kids_First_Biospecimen_ID")
combined_nb <- combined_nb %>%
tibble::column_to_rownames("Kids_First_Biospecimen_ID")
# plot heatmap
filtered_log_mb_coding_pval_zscored_anno %>% as.matrix() %>% t() %>%
pheatmap::pheatmap(annotation_col = combined_nb,
annotation_row = cluster_anno,
breaks=breaks,
cluster_rows=FALSE,
cluster_cols=FALSE,
show_colnames = F,
show_rownames=F,
filename = file.path(plots_dir, "nb_mclust_heatmap.pdf"))
# plot heatmap
filtered_log_mb_coding_pval_zscored_anno %>% as.matrix() %>% t() %>%
pheatmap::pheatmap(annotation_col = combined_nb,
annotation_row = cluster_anno,
breaks=breaks,
color = c("Red", "White", "Blue"),
cluster_rows=FALSE,
cluster_cols=FALSE,
show_colnames = F,
show_rownames=F,
filename = file.path(plots_dir, "nb_mclust_heatmap.pdf"))
# plot heatmap
filtered_log_mb_coding_pval_zscored_anno %>% as.matrix() %>% t() %>%
pheatmap::pheatmap(annotation_col = combined_nb,
annotation_row = cluster_anno,
breaks=breaks,
color = colorRampPalette(c("blue", "white", "red"))(100),
cluster_rows=FALSE,
cluster_cols=FALSE,
show_colnames = F,
show_rownames=F,
filename = file.path(plots_dir, "nb_mclust_heatmap.pdf"))
filtered_log_mb_coding_pval_zscored_anno %>% as.matrix() %>% t() %>%
pheatmap::pheatmap(annotation_col = combined_nb,
annotation_row = cluster_anno,
annotation_colors = cols,
breaks=breaks,
color = colorRampPalette(c("blue", "white", "red"))(100),
cluster_rows=FALSE,
cluster_cols=FALSE,
show_colnames = F,
show_rownames=F,
filename = file.path(plots_dir, "nb_mclust_heatmap.pdf"))
# plot heatmap
coseq_cols <- colorRampPalette(grDevices::rainbow(length(unique(cluster_anno$cluster_by_coseq))))
mycolors <- coseq_cols(length(unique(cluster_anno$cluster_by_coseq)))
names(mycolors) <- unique(cluster_anno$cluster_by_coseq)
mycolors <- list(category = mycolors)
filtered_log_mb_coding_pval_zscored_anno %>% as.matrix() %>% t() %>%
pheatmap::pheatmap(annotation_col = combined_nb,
annotation_row = cluster_anno,
annotation_colors = mycolors,
breaks=breaks,
color = colorRampPalette(c("blue", "white", "red"))(100),
cluster_rows=FALSE,
cluster_cols=FALSE,
show_colnames = F,
show_rownames=F,
filename = file.path(plots_dir, "nb_mclust_heatmap.pdf"))
View(combined_nb)
# plot heatmap
anno_color_list<-list.load("input/color_for_clusters_subtypes.yaml")
library(rlist)
# plot heatmap
anno_color_list<-list.load("input/color_for_clusters_subtypes.yaml")
# plot heatmap
anno_color_list<-list.load("input/color_for_clusters_subtypes.yaml")
anno_colour = lapply(anno_color_list,function(x) unlist(x))
filtered_log_mb_coding_pval_zscored_anno %>% as.matrix() %>% t() %>%
pheatmap::pheatmap(annotation_col = combined_nb,
annotation_row = cluster_anno,
annotation_colors = anno_colour,
breaks=breaks,
color = colorRampPalette(c("blue", "white", "red"))(100),
cluster_rows=FALSE,
cluster_cols=FALSE,
show_colnames = F,
show_rownames=F,
filename = file.path(plots_dir, "nb_mclust_heatmap.pdf"))
combined_nb$molecular_subtype
combined_nb$molecular_subtype  %>% unique()
levels(combined_nb$molecular_subtype)
combined_nb$molecular_subtype <- as.factor(combined_nb$molecular_subtype)
levels(combined_nb$molecular_subtype)
filtered_log_mb_coding_pval_zscored_anno %>% as.matrix() %>% t() %>%
pheatmap::pheatmap(annotation_col = combined_nb,
annotation_row = cluster_anno,
annotation_colors = anno_colour,
breaks=breaks,
color = colorRampPalette(c("blue", "white", "red"))(100),
cluster_rows=FALSE,
cluster_cols=FALSE,
show_colnames = F,
show_rownames=F,
filename = file.path(plots_dir, "nb_mclust_heatmap.pdf"))
anno_colors = lapply(anno_color_list,function(x) unlist(x))
filtered_log_mb_coding_pval_zscored_anno %>% as.matrix() %>% t() %>%
pheatmap::pheatmap(annotation_col = combined_nb,
annotation_row = cluster_anno,
annotation_colors = anno_colors,
breaks=breaks,
color = colorRampPalette(c("blue", "white", "red"))(100),
cluster_rows=FALSE,
cluster_cols=FALSE,
show_colnames = F,
show_rownames=F,
filename = file.path(plots_dir, "nb_mclust_heatmap.pdf"))
View(anno_colors)
# plot heatmap
anno_color_list<-list.load("input/color_for_clusters_subtypes.yaml")
anno_colors = lapply(anno_color_list,function(x) unlist(x))
filtered_log_mb_coding_pval_zscored_anno %>% as.matrix() %>% t() %>%
pheatmap::pheatmap(annotation_col = combined_nb,
annotation_row = cluster_anno,
annotation_colors = anno_colors,
breaks=breaks,
color = colorRampPalette(c("blue", "white", "red"))(100),
cluster_rows=FALSE,
cluster_cols=FALSE,
show_colnames = F,
show_rownames=F,
filename = file.path(plots_dir, "nb_mclust_heatmap.pdf"))
results<-GSNCAtest(object=expression_of_interest_coding_each_final,
# since the matrix is selected by order of row, the group will match
group=bs_id_quantile_df$group,
nperm=1000,
cor.method="pearson",
check.sd=TRUE,
min.sd=1e-3,
max.skip=10)
Sys.setenv('R_MAX_VSIZE'=32000000000)
results<-GSNCAtest(object=expression_of_interest_coding_each_final,
# since the matrix is selected by order of row, the group will match
group=bs_id_quantile_df$group,
nperm=1000,
cor.method="pearson",
check.sd=TRUE,
min.sd=1e-3,
max.skip=10)
Sys.getenv('R_MAX_VSIZE')
results<-GSNCAtest(object=expression_of_interest_coding_each_final,
# since the matrix is selected by order of row, the group will match
group=bs_id_quantile_df$group,
nperm=1000,
cor.method="pearson",
check.sd=TRUE,
min.sd=1e-3,
max.skip=10)
View(expression_of_interest_coding_each_final)
######## finally run GSNCA test
results<-GSNCAtest(object=expression_of_interest_coding_each_final,
# since the matrix is selected by order of row, the group will match
group=bs_id_quantile_df$group,
nperm=1000,
cor.method="pearson",
check.sd=TRUE,
min.sd=1,
max.skip=10)
######## finally run GSNCA test
results<-GSNCAtest(object=expression_of_interest_coding_each_final,
# since the matrix is selected by order of row, the group will match
group=bs_id_quantile_df$group,
nperm=1000,
cor.method="pearson",
check.sd=TRUE,
min.sd=1e-2,
max.skip=10)
######## finally run GSNCA test
results<-GSNCAtest(object=expression_of_interest_coding_each_final,
# since the matrix is selected by order of row, the group will match
group=bs_id_quantile_df$group,
nperm=1000,
cor.method="pearson",
check.sd=TRUE,
min.sd=1e-3,
max.skip=10)
# Use DESeq2 to filter out lowly expressed genes
# give them the same group for all samples
group <-factor(rep(c(1), times = length(colnames(expression_of_interest_coding_each))))
# filter lowly expressed genes by DESeq2
expression_of_interest_coding_each <-DGEList(expression_of_interest_coding_each,group=group)
keep <-filterByExpr(expression_of_interest_coding_each)
expression_of_interest_coding_final <-expression_of_interest_coding_each[keep,,keep.lib.sizes=FALSE]
# extract the resulting counts from the DGElist object as a df to use for dip.test
expression_of_interest_coding_final <- as.data.frame(expression_of_interest_coding_final$counts)
######## assign 1 and 2 to all samples in the cancer group base on expression of goi
expression_of_goi <- expression_of_interest_coding_each %>%
tibble::rownames_to_column("Gene_symbol") %>%
filter(Gene_symbol == gene_interest) %>%
tibble::column_to_rownames("Gene_symbol") %>%
t() %>%
as.data.frame()
colnames(expression_of_goi) <-"gene_interest"
# calculate the quantile and assign groups
upper_quantile <- quantile(expression_of_goi$gene_interest, 0.75)
lower_quantile <- quantile(expression_of_goi$gene_interest, 0.25)
bs_id_quantile_df <- expression_of_goi %>%
tibble::rownames_to_column("Kids_First_Biospecimen_ID") %>%
mutate(group = case_when(
gene_interest >= upper_quantile ~"1",
gene_interest <= lower_quantile ~"2",
TRUE ~ "middle"
)) %>%
filter(group != "middle") %>%
select(Kids_First_Biospecimen_ID, group) %>%
tibble::column_to_rownames("Kids_First_Biospecimen_ID")
bs_id_quantile_df <- expression_of_goi %>%
tibble::rownames_to_column("Kids_First_Biospecimen_ID") %>%
mutate(group = case_when(
gene_interest >= upper_quantile ~"1",
gene_interest <= lower_quantile ~"2",
TRUE ~ "middle"
)) %>%
filter(group != "middle") %>%
dplyr::select(Kids_First_Biospecimen_ID, group) %>%
tibble::column_to_rownames("Kids_First_Biospecimen_ID")
# filter count matrix to those samples
expression_of_interest_coding_each_final <- expression_of_interest_coding_each %>%
# by selecting, the matrix is sorted in column based on row order o bs_id_quantile_df
dplyr::select(rownames(bs_id_quantile_df))
# filter count matrix to those samples
expression_of_interest_coding_each_final <- expression_of_interest_coding_each %>%
# by selecting, the matrix is sorted in column based on row order o bs_id_quantile_df
dplyr::select(unlist(rownames(bs_id_quantile_df)))
unlist(rownames(bs_id_quantile_df))
# filter count matrix to those samples
expression_of_interest_coding_each_final <- expression_of_interest_coding_each %>%
# by selecting, the matrix is sorted in column based on row order o bs_id_quantile_df
dplyr::select(unlist(rownames(bs_id_quantile_df)))
# filter expression to that particular cancer group
expression_of_interest_coding_each <- expression_of_interest_coding %>%
select(all_of(cg_bsid_each))
rm(list = ls())
getwd()
setwd("/Users/jinr/imaging_related_analyses/coexpression_gene_pathway_analysis")
#### Define Directories --------------------------------------------------------
root_dir <- rprojroot::find_root(rprojroot::has_dir(".git"))
histology_df <- readr::read_tsv("../data/histologies.tsv", guess_max=100000)
expression_data <- readRDS("../data/gene-expression-rsem-tpm-collapsed.rds")
short_long_match <- readr::read_tsv("../data/short_long_match.tsv")
cg_gene_interest <- readr::read_tsv("../data/cg_gene_interest.tsv")
gtf <- file.path("../references/gencode.v27.primary_assembly.annotation.gtf.gz")
#### Filter to the cancer group of interest ------------------------------------
cancer_group_list <- cg_gene_interest %>%
pull(short_name) %>% unique() %>%
as.list()
cohort_df_list <- lapply(cancer_group_list, function(x){
cancer_group_long <- short_long_match %>%
filter(short_name ==x) %>%
pull(long_name)
cohort_df_each <- histology_df %>%
# keep only initial CNV tumor
dplyr::filter(sample_type == "Tumor") %>%
dplyr::filter(tumor_descriptor == "Initial CNS Tumor") %>%
# do not include TCGA or GTEx
dplyr::filter(cohort %in% c("PBTA","GMKF","TARGET")) %>%
dplyr::filter(experimental_strategy=="RNA-Seq") %>%
dplyr::filter(cancer_group %in% cancer_group_long) %>%
# exclude derived cell line
dplyr::filter(composition != "Derived Cell Line") %>%
# keep only unique Kids First Participant
dplyr::distinct(Kids_First_Participant_ID, .keep_all = TRUE) %>%
dplyr::select(Kids_First_Biospecimen_ID, harmonized_diagnosis) %>%
dplyr::mutate(short_name = x)
})
cohort_df <- do.call(rbind,cohort_df_list)
#### Subset gene count to sample of interest -----------------------------------
# get biospecimen ID's for samples
cohort_bsid <- cohort_df %>% pull(Kids_First_Biospecimen_ID) %>% unique()
# subset to gene and sample of interest
expression_of_interest <- expression_data %>% dplyr::select(all_of(cohort_bsid))
# read gtf and filter to protein coding
gencode_gtf <- rtracklayer::import(con = gtf)
gencode_gtf <- as.data.frame(gencode_gtf)
gencode_gtf <- gencode_gtf %>%
dplyr::select(gene_id, gene_name, gene_type) %>%
filter(gene_type == "protein_coding") %>%
unique()
# filter expression count file to contain only protein coding gene
expression_of_interest_coding <- expression_of_interest[rownames(expression_of_interest) %in% gencode_gtf$gene_name,]
i=1
# find the cancer group of interest
cg_interest <- cg_gene_interest[i,1] %>%
pull(short_name)
# find the gene of interest
gene_interest <- cg_gene_interest[i,2] %>%
pull(gene_of_interest)
# get BS ID for that particular cancer group
cg_bsid_each <- cohort_df %>%
filter(short_name == cg_interest) %>%
pull(Kids_First_Biospecimen_ID) %>% unique()
# filter expression to that particular cancer group
expression_of_interest_coding_each <- expression_of_interest_coding %>%
dplyr::select(all_of(cg_bsid_each))
######## assign 1 and 2 to all samples in the cancer group base on expression of goi
expression_of_goi <- expression_of_interest_coding_each %>%
tibble::rownames_to_column("Gene_symbol") %>%
filter(Gene_symbol == gene_interest) %>%
tibble::column_to_rownames("Gene_symbol") %>%
t() %>%
as.data.frame()
colnames(expression_of_goi) <-"gene_interest"
# calculate the quantile and assign groups
upper_quantile <- quantile(expression_of_goi$gene_interest, 0.75)
lower_quantile <- quantile(expression_of_goi$gene_interest, 0.25)
bs_id_quantile_df <- expression_of_goi %>%
tibble::rownames_to_column("Kids_First_Biospecimen_ID") %>%
mutate(group = case_when(
gene_interest >= upper_quantile ~"1",
gene_interest <= lower_quantile ~"2",
TRUE ~ "middle"
)) %>%
filter(group != "middle") %>%
dplyr::select(Kids_First_Biospecimen_ID, group) %>%
tibble::column_to_rownames("Kids_First_Biospecimen_ID")
# filter count matrix to those samples
expression_of_interest_coding_each <- expression_of_interest_coding_each %>%
# by selecting, the matrix is sorted in column based on row order o bs_id_quantile_df
dplyr::select(unlist(rownames(bs_id_quantile_df)))
######## filter out genes with sd < 0.001
# calculate sd for each gene and get gene names of sd < 0.001
gene_sd_low <- apply(expression_of_interest_coding_each, 1, sd, na.rm = TRUE) %>%
as.data.frame() %>%
filter(. <0.001) %>%
rownames()
# filter those genes out
expression_of_interest_coding_each <- expression_of_interest_coding_each %>%
tibble::rownames_to_column("Gene_symbol") %>%
filter(!Gene_symbol %in% gene_sd_low) %>%
tibble::column_to_rownames("Gene_symbol")
# Use DESeq2 to filter out lowly expressed genes
# give them the same group for all samples
group <-factor(rep(c(1), times = length(colnames(expression_of_interest_coding_each))))
# filter lowly expressed genes by DESeq2
expression_of_interest_coding_each <-DGEList(expression_of_interest_coding_each,group=group)
keep <-filterByExpr(expression_of_interest_coding_each)
expression_of_interest_coding_final <-expression_of_interest_coding_each[keep,,keep.lib.sizes=FALSE]
# extract the resulting counts from the DGElist object as a df to use for dip.test
expression_of_interest_coding_final <- as.data.frame(expression_of_interest_coding_final$counts)
######## finally run GSNCA test
results<-GSNCAtest(object=expression_of_interest_coding_each_final,
# since the matrix is selected by order of row, the group will match
group=bs_id_quantile_df$group,
nperm=1000,
cor.method="pearson",
check.sd=TRUE,
min.sd=1e-3,
max.skip=10)
# extract the resulting counts from the DGElist object as a df to use for dip.test
expression_of_interest_coding_final <- as.data.frame(expression_of_interest_coding_final$counts) %>%
as.matrix()
expression_of_interest_coding_final <-expression_of_interest_coding_each[keep,,keep.lib.sizes=FALSE]
# extract the resulting counts from the DGElist object as a df to use for dip.test
expression_of_interest_coding_final <- as.matrix(expression_of_interest_coding_each$counts)
######## finally run GSNCA test
results<-GSNCAtest(object=expression_of_interest_coding_final,
# since the matrix is selected by order of row, the group will match
group=bs_id_quantile_df$group,
nperm=1000,
cor.method="pearson",
check.sd=TRUE,
min.sd=1e-3,
max.skip=10)
gene_sd_low <- apply(xpression_of_interest_coding_final, 1, sd, na.rm = TRUE) %>%
as.data.frame() %>%
filter(. <0.001) %>%
rownames()
gene_sd_low <- apply(expression_of_interest_coding_final, 1, sd, na.rm = TRUE) %>%
as.data.frame() %>%
filter(. <0.001) %>%
rownames()
gene_sd_low <- apply(expression_of_interest_coding_final, 1, sd, na.rm = TRUE) %>%
as.data.frame()
View(gene_sd_low)
######## filter out genes with sd < 0.001
# calculate sd for each gene and get gene names of sd < 0.001
gene_sd_low <- apply(expression_of_interest_coding_each, 1, sd, na.rm = TRUE) %>%
as.data.frame() %>%
filter(. <0.0015) %>%
rownames()
gene_sd_low <- apply(expression_of_interest_coding_final, 1, sd, na.rm = TRUE) %>%
as.data.frame() %>%
filter(. <0.0015) %>%
rownames()
expression_of_interest_coding_final <- expression_of_interest_coding_final %>%
tibble::rownames_to_column("Gene_symbol") %>%
filter(!Gene_symbol %in% gene_sd_low) %>%
tibble::column_to_rownames("Gene_symbol")
# filter expression to that particular cancer group
expression_of_interest_coding_each <- expression_of_interest_coding %>%
dplyr::select(all_of(cg_bsid_each))
######## assign 1 and 2 to all samples in the cancer group base on expression of goi
expression_of_goi <- expression_of_interest_coding_each %>%
tibble::rownames_to_column("Gene_symbol") %>%
filter(Gene_symbol == gene_interest) %>%
tibble::column_to_rownames("Gene_symbol") %>%
t() %>%
as.data.frame()
colnames(expression_of_goi) <-"gene_interest"
# calculate the quantile and assign groups
upper_quantile <- quantile(expression_of_goi$gene_interest, 0.75)
lower_quantile <- quantile(expression_of_goi$gene_interest, 0.25)
bs_id_quantile_df <- expression_of_goi %>%
tibble::rownames_to_column("Kids_First_Biospecimen_ID") %>%
mutate(group = case_when(
gene_interest >= upper_quantile ~"1",
gene_interest <= lower_quantile ~"2",
TRUE ~ "middle"
)) %>%
filter(group != "middle") %>%
dplyr::select(Kids_First_Biospecimen_ID, group) %>%
tibble::column_to_rownames("Kids_First_Biospecimen_ID")
# filter count matrix to those samples
expression_of_interest_coding_each <- expression_of_interest_coding_each %>%
# by selecting, the matrix is sorted in column based on row order o bs_id_quantile_df
dplyr::select(unlist(rownames(bs_id_quantile_df)))
######## filter out genes with sd < 0.001
# calculate sd for each gene and get gene names of sd < 0.001
gene_sd_low <- apply(expression_of_interest_coding_each, 1, sd, na.rm = TRUE) %>%
as.data.frame() %>%
filter(. <0.0015) %>%
rownames()
# filter those genes out
expression_of_interest_coding_each <- expression_of_interest_coding_each %>%
tibble::rownames_to_column("Gene_symbol") %>%
filter(!Gene_symbol %in% gene_sd_low) %>%
tibble::column_to_rownames("Gene_symbol")
# Use DESeq2 to filter out lowly expressed genes
# give them the same group for all samples
group <-factor(rep(c(1), times = length(colnames(expression_of_interest_coding_each))))
# filter lowly expressed genes by DESeq2
expression_of_interest_coding_each <-DGEList(expression_of_interest_coding_each,group=group)
keep <-filterByExpr(expression_of_interest_coding_each)
expression_of_interest_coding_each <-expression_of_interest_coding_each[keep,,keep.lib.sizes=FALSE]
# extract the resulting counts from the DGElist object as a df to use for dip.test
expression_of_interest_coding_final <- as.matrix(expression_of_interest_coding_each$counts)
######## finally run GSNCA test
results<-GSNCAtest(object=expression_of_interest_coding_final,
# since the matrix is selected by order of row, the group will match
group=bs_id_quantile_df$group,
nperm=1000,
cor.method="pearson",
check.sd=TRUE,
min.sd=1e-3,
max.skip=10)
source("~/imaging_related_analyses/coexpression_gene_pathway_analysis/GSNCA_analysis_per_disease.R")
